#!/usr/bin/env python3

import sys
from pathlib import Path
import shutil

def cleanup_files(package_dir: Path):
    for relative_path in [".gitlab-ci.yml", "git_push.sh", ".openapi-generator"]:
        target = package_dir / relative_path
        if target.exists():
            if target.is_dir():
                shutil.rmtree(target)
                print(f"Removed directory: {target}")
            else:
                target.unlink()
                print(f"Removed file: {target}")
        else:
            print(f"Not found (skipped): {target}")

def copy_license_file(package_dir: Path, license_file: Path):
    if not license_file.exists():
        print(f"License file not found: {license_file}")
        sys.exit(1)
    target_path = package_dir / "LICENSE"
    shutil.copyfile(license_file, target_path)
    print(f"Copied LICENSE to: {target_path}")

def patch_setup_py(setup_path: Path):
    content = setup_path.read_text()

    # Improve description
    content = content.replace(
        'description="vi-vnfm.proto"',
        'description="Python client for KubeVIM VI-VNFM API - ETSI NFV MANO interface"'
    )

    # Fix long description
    content = content.replace(
        'long_description="""\\\n    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n    """',
        'long_description=open("README.md").read()'
    )

    # Fix URL
    content = content.replace(
        'url="github.com/kube-nfv/kube-vim-api"',
        'url="https://github.com/kube-nfv/kube-vim-api"'
    )

    # Update author
    content = content.replace(
        'author="OpenAPI Generator community"',
        'author="Dmytro Malovanyi"'
    )

    content = content.replace(
        'author_email="team@openapitools.org"',
        'author_email="dmitrymalovanyy@gmail.com"'
    )

    # Add license
    if 'license=' not in content:
        content = content.replace(
            'author_email="dmitrymalovanyy@gmail.com",',
            'author_email="dmitrymalovanyy@gmail.com",\n    license="Apache-2.0",'
        )

    # Add project URLs for PyPI
    if 'project_urls=' not in content:
        content = content.replace(
            'url="https://github.com/kube-nfv/kube-vim-api",',
            '''url="https://github.com/kube-nfv/kube-vim-api",
    project_urls={
        "Documentation": "https://github.com/kube-nfv/kube-vim-api#readme",
        "Source": "https://github.com/kube-nfv/kube-vim-api",
        "Tracker": "https://github.com/kube-nfv/kube-vim-api/issues",
        "Download": "https://pypi.org/project/kubevim-vivnfm-client/",
    },'''
        )

    # Improve keywords for PyPI discoverability
    content = content.replace(
        'keywords=["OpenAPI", "OpenAPI-Generator", "vivnfm/vi-vnfm.proto"],',
        'keywords=["etsi", "nfv", "mano", "vim", "vnfm", "kubevim", "kubernetes", "virtualization", "openapi", "grpc", "cloud-native"],'
    )

    # Add comprehensive classifiers
    if 'classifiers=' not in content:
        content = content.replace(
            'include_package_data=True,',
            '''include_package_data=True,
    classifiers=[
        # Development Status
        "Development Status :: 4 - Beta",

        # Intended Audience
        "Intended Audience :: Developers",
        "Intended Audience :: System Administrators",
        "Intended Audience :: Telecommunications Industry",

        # Topic
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: System :: Networking",
        "Topic :: System :: Systems Administration",
        "Topic :: Internet",

        # License
        "License :: OSI Approved :: Apache Software License",

        # Programming Language
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",

        # Operating System
        "Operating System :: OS Independent",

        # Framework
        "Framework :: AsyncIO",
    ],'''
        )

    # Ensure long_description_content_type is set
    if 'long_description_content_type=' not in content:
        content = content.replace(
            'long_description=open("README.md").read(),',
            'long_description=open("README.md").read(),\n    long_description_content_type="text/markdown",'
        )

    setup_path.write_text(content)
    print(f"Patched setup.py: {setup_path}")

def main():
    if len(sys.argv) != 3:
        print("Usage: python prepare_oapi_py_package.py <PYTHON_PACKAGE_DIR> <LICENSE_FILE>")
        sys.exit(1)

    package_dir = Path(sys.argv[1])
    license_file = Path(sys.argv[2])

    if not package_dir.exists():
        print(f"Directory does not exist: {package_dir}")
        sys.exit(1)

    setup_py = package_dir / "setup.py"
    if not setup_py.exists():
        print(f"setup.py not found in: {package_dir}")
        sys.exit(1)

    cleanup_files(package_dir)
    copy_license_file(package_dir, license_file)
    patch_setup_py(setup_py)

if __name__ == "__main__":
    main()
