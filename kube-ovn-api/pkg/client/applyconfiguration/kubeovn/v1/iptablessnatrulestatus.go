// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IptablesSnatRuleStatusApplyConfiguration represents a declarative configuration of the IptablesSnatRuleStatus type for use
// with apply.
type IptablesSnatRuleStatusApplyConfiguration struct {
	Ready        *bool   `json:"ready,omitempty"`
	V4ip         *string `json:"v4ip,omitempty"`
	V6ip         *string `json:"v6ip,omitempty"`
	NatGwDp      *string `json:"natGwDp,omitempty"`
	Redo         *string `json:"redo,omitempty"`
	InternalCIDR *string `json:"internalCIDR,omitempty"`
	// Conditions represents the latest state of the object
	Conditions []ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// IptablesSnatRuleStatusApplyConfiguration constructs a declarative configuration of the IptablesSnatRuleStatus type for use with
// apply.
func IptablesSnatRuleStatus() *IptablesSnatRuleStatusApplyConfiguration {
	return &IptablesSnatRuleStatusApplyConfiguration{}
}

// WithReady sets the Ready field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ready field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithReady(value bool) *IptablesSnatRuleStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// WithV4ip sets the V4ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4ip field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithV4ip(value string) *IptablesSnatRuleStatusApplyConfiguration {
	b.V4ip = &value
	return b
}

// WithV6ip sets the V6ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6ip field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithV6ip(value string) *IptablesSnatRuleStatusApplyConfiguration {
	b.V6ip = &value
	return b
}

// WithNatGwDp sets the NatGwDp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NatGwDp field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithNatGwDp(value string) *IptablesSnatRuleStatusApplyConfiguration {
	b.NatGwDp = &value
	return b
}

// WithRedo sets the Redo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Redo field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithRedo(value string) *IptablesSnatRuleStatusApplyConfiguration {
	b.Redo = &value
	return b
}

// WithInternalCIDR sets the InternalCIDR field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InternalCIDR field is set to the value of the last call.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithInternalCIDR(value string) *IptablesSnatRuleStatusApplyConfiguration {
	b.InternalCIDR = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *IptablesSnatRuleStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *IptablesSnatRuleStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
