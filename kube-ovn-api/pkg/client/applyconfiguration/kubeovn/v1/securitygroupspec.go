// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SecurityGroupSpecApplyConfiguration represents a declarative configuration of the SecurityGroupSpec type for use
// with apply.
type SecurityGroupSpecApplyConfiguration struct {
	IngressRules          []SecurityGroupRuleApplyConfiguration `json:"ingressRules,omitempty"`
	EgressRules           []SecurityGroupRuleApplyConfiguration `json:"egressRules,omitempty"`
	AllowSameGroupTraffic *bool                                 `json:"allowSameGroupTraffic,omitempty"`
}

// SecurityGroupSpecApplyConfiguration constructs a declarative configuration of the SecurityGroupSpec type for use with
// apply.
func SecurityGroupSpec() *SecurityGroupSpecApplyConfiguration {
	return &SecurityGroupSpecApplyConfiguration{}
}

// WithIngressRules adds the given value to the IngressRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IngressRules field.
func (b *SecurityGroupSpecApplyConfiguration) WithIngressRules(values ...*SecurityGroupRuleApplyConfiguration) *SecurityGroupSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIngressRules")
		}
		b.IngressRules = append(b.IngressRules, *values[i])
	}
	return b
}

// WithEgressRules adds the given value to the EgressRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EgressRules field.
func (b *SecurityGroupSpecApplyConfiguration) WithEgressRules(values ...*SecurityGroupRuleApplyConfiguration) *SecurityGroupSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEgressRules")
		}
		b.EgressRules = append(b.EgressRules, *values[i])
	}
	return b
}

// WithAllowSameGroupTraffic sets the AllowSameGroupTraffic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowSameGroupTraffic field is set to the value of the last call.
func (b *SecurityGroupSpecApplyConfiguration) WithAllowSameGroupTraffic(value bool) *SecurityGroupSpecApplyConfiguration {
	b.AllowSameGroupTraffic = &value
	return b
}
