// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VipSpecApplyConfiguration represents a declarative configuration of the VipSpec type for use
// with apply.
type VipSpecApplyConfiguration struct {
	Namespace *string `json:"namespace,omitempty"`
	Subnet    *string `json:"subnet,omitempty"`
	Type      *string `json:"type,omitempty"`
	// usage type: switch lb vip, allowed address pair vip by default
	V4ip          *string  `json:"v4ip,omitempty"`
	V6ip          *string  `json:"v6ip,omitempty"`
	MacAddress    *string  `json:"macAddress,omitempty"`
	Selector      []string `json:"selector,omitempty"`
	AttachSubnets []string `json:"attachSubnets,omitempty"`
}

// VipSpecApplyConfiguration constructs a declarative configuration of the VipSpec type for use with
// apply.
func VipSpec() *VipSpecApplyConfiguration {
	return &VipSpecApplyConfiguration{}
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithNamespace(value string) *VipSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithSubnet(value string) *VipSpecApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithType(value string) *VipSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithV4ip sets the V4ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4ip field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithV4ip(value string) *VipSpecApplyConfiguration {
	b.V4ip = &value
	return b
}

// WithV6ip sets the V6ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6ip field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithV6ip(value string) *VipSpecApplyConfiguration {
	b.V6ip = &value
	return b
}

// WithMacAddress sets the MacAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MacAddress field is set to the value of the last call.
func (b *VipSpecApplyConfiguration) WithMacAddress(value string) *VipSpecApplyConfiguration {
	b.MacAddress = &value
	return b
}

// WithSelector adds the given value to the Selector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selector field.
func (b *VipSpecApplyConfiguration) WithSelector(values ...string) *VipSpecApplyConfiguration {
	for i := range values {
		b.Selector = append(b.Selector, values[i])
	}
	return b
}

// WithAttachSubnets adds the given value to the AttachSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AttachSubnets field.
func (b *VipSpecApplyConfiguration) WithAttachSubnets(values ...string) *VipSpecApplyConfiguration {
	for i := range values {
		b.AttachSubnets = append(b.AttachSubnets, values[i])
	}
	return b
}
