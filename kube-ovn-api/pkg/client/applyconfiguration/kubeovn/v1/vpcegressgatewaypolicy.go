// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VpcEgressGatewayPolicyApplyConfiguration represents a declarative configuration of the VpcEgressGatewayPolicy type for use
// with apply.
type VpcEgressGatewayPolicyApplyConfiguration struct {
	// whether to enable SNAT/MASQUERADE for the egress traffic
	SNAT *bool `json:"snat,omitempty"`
	// CIDRs/subnets targeted by the egress traffic policy
	IPBlocks []string `json:"ipBlocks,omitempty"`
	Subnets  []string `json:"subnets,omitempty"`
}

// VpcEgressGatewayPolicyApplyConfiguration constructs a declarative configuration of the VpcEgressGatewayPolicy type for use with
// apply.
func VpcEgressGatewayPolicy() *VpcEgressGatewayPolicyApplyConfiguration {
	return &VpcEgressGatewayPolicyApplyConfiguration{}
}

// WithSNAT sets the SNAT field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SNAT field is set to the value of the last call.
func (b *VpcEgressGatewayPolicyApplyConfiguration) WithSNAT(value bool) *VpcEgressGatewayPolicyApplyConfiguration {
	b.SNAT = &value
	return b
}

// WithIPBlocks adds the given value to the IPBlocks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPBlocks field.
func (b *VpcEgressGatewayPolicyApplyConfiguration) WithIPBlocks(values ...string) *VpcEgressGatewayPolicyApplyConfiguration {
	for i := range values {
		b.IPBlocks = append(b.IPBlocks, values[i])
	}
	return b
}

// WithSubnets adds the given value to the Subnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subnets field.
func (b *VpcEgressGatewayPolicyApplyConfiguration) WithSubnets(values ...string) *VpcEgressGatewayPolicyApplyConfiguration {
	for i := range values {
		b.Subnets = append(b.Subnets, values[i])
	}
	return b
}
