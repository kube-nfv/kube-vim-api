// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
)

// VpcSpecApplyConfiguration represents a declarative configuration of the VpcSpec type for use
// with apply.
type VpcSpecApplyConfiguration struct {
	DefaultSubnet        *string                  `json:"defaultSubnet,omitempty"`
	Namespaces           []string                 `json:"namespaces,omitempty"`
	StaticRoutes         []*kubeovnv1.StaticRoute `json:"staticRoutes,omitempty"`
	PolicyRoutes         []*kubeovnv1.PolicyRoute `json:"policyRoutes,omitempty"`
	VpcPeerings          []*kubeovnv1.VpcPeering  `json:"vpcPeerings,omitempty"`
	EnableExternal       *bool                    `json:"enableExternal,omitempty"`
	ExtraExternalSubnets []string                 `json:"extraExternalSubnets,omitempty"`
	EnableBfd            *bool                    `json:"enableBfd,omitempty"`
	// optional BFD LRP configuration
	// currently the LRP is used for vpc external gateway only
	BFDPort *BFDPortApplyConfiguration `json:"bfdPort,omitempty"`
}

// VpcSpecApplyConfiguration constructs a declarative configuration of the VpcSpec type for use with
// apply.
func VpcSpec() *VpcSpecApplyConfiguration {
	return &VpcSpecApplyConfiguration{}
}

// WithDefaultSubnet sets the DefaultSubnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultSubnet field is set to the value of the last call.
func (b *VpcSpecApplyConfiguration) WithDefaultSubnet(value string) *VpcSpecApplyConfiguration {
	b.DefaultSubnet = &value
	return b
}

// WithNamespaces adds the given value to the Namespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Namespaces field.
func (b *VpcSpecApplyConfiguration) WithNamespaces(values ...string) *VpcSpecApplyConfiguration {
	for i := range values {
		b.Namespaces = append(b.Namespaces, values[i])
	}
	return b
}

// WithStaticRoutes adds the given value to the StaticRoutes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StaticRoutes field.
func (b *VpcSpecApplyConfiguration) WithStaticRoutes(values ...**kubeovnv1.StaticRoute) *VpcSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStaticRoutes")
		}
		b.StaticRoutes = append(b.StaticRoutes, *values[i])
	}
	return b
}

// WithPolicyRoutes adds the given value to the PolicyRoutes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PolicyRoutes field.
func (b *VpcSpecApplyConfiguration) WithPolicyRoutes(values ...**kubeovnv1.PolicyRoute) *VpcSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPolicyRoutes")
		}
		b.PolicyRoutes = append(b.PolicyRoutes, *values[i])
	}
	return b
}

// WithVpcPeerings adds the given value to the VpcPeerings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VpcPeerings field.
func (b *VpcSpecApplyConfiguration) WithVpcPeerings(values ...**kubeovnv1.VpcPeering) *VpcSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVpcPeerings")
		}
		b.VpcPeerings = append(b.VpcPeerings, *values[i])
	}
	return b
}

// WithEnableExternal sets the EnableExternal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableExternal field is set to the value of the last call.
func (b *VpcSpecApplyConfiguration) WithEnableExternal(value bool) *VpcSpecApplyConfiguration {
	b.EnableExternal = &value
	return b
}

// WithExtraExternalSubnets adds the given value to the ExtraExternalSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtraExternalSubnets field.
func (b *VpcSpecApplyConfiguration) WithExtraExternalSubnets(values ...string) *VpcSpecApplyConfiguration {
	for i := range values {
		b.ExtraExternalSubnets = append(b.ExtraExternalSubnets, values[i])
	}
	return b
}

// WithEnableBfd sets the EnableBfd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableBfd field is set to the value of the last call.
func (b *VpcSpecApplyConfiguration) WithEnableBfd(value bool) *VpcSpecApplyConfiguration {
	b.EnableBfd = &value
	return b
}

// WithBFDPort sets the BFDPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BFDPort field is set to the value of the last call.
func (b *VpcSpecApplyConfiguration) WithBFDPort(value *BFDPortApplyConfiguration) *VpcSpecApplyConfiguration {
	b.BFDPort = value
	return b
}
