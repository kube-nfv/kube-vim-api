// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// BFDPortStatusApplyConfiguration represents a declarative configuration of the BFDPortStatus type for use
// with apply.
type BFDPortStatusApplyConfiguration struct {
	Name  *string  `json:"name,omitempty"`
	IP    *string  `json:"ip,omitempty"`
	Nodes []string `json:"nodes,omitempty"`
}

// BFDPortStatusApplyConfiguration constructs a declarative configuration of the BFDPortStatus type for use with
// apply.
func BFDPortStatus() *BFDPortStatusApplyConfiguration {
	return &BFDPortStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *BFDPortStatusApplyConfiguration) WithName(value string) *BFDPortStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *BFDPortStatusApplyConfiguration) WithIP(value string) *BFDPortStatusApplyConfiguration {
	b.IP = &value
	return b
}

// WithNodes adds the given value to the Nodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Nodes field.
func (b *BFDPortStatusApplyConfiguration) WithNodes(values ...string) *BFDPortStatusApplyConfiguration {
	for i := range values {
		b.Nodes = append(b.Nodes, values[i])
	}
	return b
}
