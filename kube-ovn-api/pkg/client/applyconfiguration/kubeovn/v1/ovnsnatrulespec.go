// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// OvnSnatRuleSpecApplyConfiguration represents a declarative configuration of the OvnSnatRuleSpec type for use
// with apply.
type OvnSnatRuleSpecApplyConfiguration struct {
	OvnEip    *string `json:"ovnEip,omitempty"`
	VpcSubnet *string `json:"vpcSubnet,omitempty"`
	IPName    *string `json:"ipName,omitempty"`
	Vpc       *string `json:"vpc,omitempty"`
	V4IpCidr  *string `json:"v4IpCidr,omitempty"`
	// subnet cidr or pod ip address
	V6IpCidr *string `json:"v6IpCidr,omitempty"`
}

// OvnSnatRuleSpecApplyConfiguration constructs a declarative configuration of the OvnSnatRuleSpec type for use with
// apply.
func OvnSnatRuleSpec() *OvnSnatRuleSpecApplyConfiguration {
	return &OvnSnatRuleSpecApplyConfiguration{}
}

// WithOvnEip sets the OvnEip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OvnEip field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithOvnEip(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.OvnEip = &value
	return b
}

// WithVpcSubnet sets the VpcSubnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VpcSubnet field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithVpcSubnet(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.VpcSubnet = &value
	return b
}

// WithIPName sets the IPName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPName field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithIPName(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.IPName = &value
	return b
}

// WithVpc sets the Vpc field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vpc field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithVpc(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.Vpc = &value
	return b
}

// WithV4IpCidr sets the V4IpCidr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4IpCidr field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithV4IpCidr(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.V4IpCidr = &value
	return b
}

// WithV6IpCidr sets the V6IpCidr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6IpCidr field is set to the value of the last call.
func (b *OvnSnatRuleSpecApplyConfiguration) WithV6IpCidr(value string) *OvnSnatRuleSpecApplyConfiguration {
	b.V6IpCidr = &value
	return b
}
