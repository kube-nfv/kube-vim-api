// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SwitchLBRuleSpecApplyConfiguration represents a declarative configuration of the SwitchLBRuleSpec type for use
// with apply.
type SwitchLBRuleSpecApplyConfiguration struct {
	Vip             *string                              `json:"vip,omitempty"`
	Namespace       *string                              `json:"namespace,omitempty"`
	Selector        []string                             `json:"selector,omitempty"`
	Endpoints       []string                             `json:"endpoints,omitempty"`
	SessionAffinity *string                              `json:"sessionAffinity,omitempty"`
	Ports           []SwitchLBRulePortApplyConfiguration `json:"ports,omitempty"`
}

// SwitchLBRuleSpecApplyConfiguration constructs a declarative configuration of the SwitchLBRuleSpec type for use with
// apply.
func SwitchLBRuleSpec() *SwitchLBRuleSpecApplyConfiguration {
	return &SwitchLBRuleSpecApplyConfiguration{}
}

// WithVip sets the Vip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vip field is set to the value of the last call.
func (b *SwitchLBRuleSpecApplyConfiguration) WithVip(value string) *SwitchLBRuleSpecApplyConfiguration {
	b.Vip = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *SwitchLBRuleSpecApplyConfiguration) WithNamespace(value string) *SwitchLBRuleSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithSelector adds the given value to the Selector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selector field.
func (b *SwitchLBRuleSpecApplyConfiguration) WithSelector(values ...string) *SwitchLBRuleSpecApplyConfiguration {
	for i := range values {
		b.Selector = append(b.Selector, values[i])
	}
	return b
}

// WithEndpoints adds the given value to the Endpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Endpoints field.
func (b *SwitchLBRuleSpecApplyConfiguration) WithEndpoints(values ...string) *SwitchLBRuleSpecApplyConfiguration {
	for i := range values {
		b.Endpoints = append(b.Endpoints, values[i])
	}
	return b
}

// WithSessionAffinity sets the SessionAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SessionAffinity field is set to the value of the last call.
func (b *SwitchLBRuleSpecApplyConfiguration) WithSessionAffinity(value string) *SwitchLBRuleSpecApplyConfiguration {
	b.SessionAffinity = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *SwitchLBRuleSpecApplyConfiguration) WithPorts(values ...*SwitchLBRulePortApplyConfiguration) *SwitchLBRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}
