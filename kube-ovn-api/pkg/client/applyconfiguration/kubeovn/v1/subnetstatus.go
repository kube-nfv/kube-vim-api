// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SubnetStatusApplyConfiguration represents a declarative configuration of the SubnetStatus type for use
// with apply.
type SubnetStatusApplyConfiguration struct {
	// Conditions represents the latest state of the object
	Conditions             []ConditionApplyConfiguration                   `json:"conditions,omitempty"`
	V4AvailableIPs         *float64                                        `json:"v4availableIPs,omitempty"`
	V4AvailableIPRange     *string                                         `json:"v4availableIPrange,omitempty"`
	V4UsingIPs             *float64                                        `json:"v4usingIPs,omitempty"`
	V4UsingIPRange         *string                                         `json:"v4usingIPrange,omitempty"`
	V6AvailableIPs         *float64                                        `json:"v6availableIPs,omitempty"`
	V6AvailableIPRange     *string                                         `json:"v6availableIPrange,omitempty"`
	V6UsingIPs             *float64                                        `json:"v6usingIPs,omitempty"`
	V6UsingIPRange         *string                                         `json:"v6usingIPrange,omitempty"`
	ActivateGateway        *string                                         `json:"activateGateway,omitempty"`
	DHCPv4OptionsUUID      *string                                         `json:"dhcpV4OptionsUUID,omitempty"`
	DHCPv6OptionsUUID      *string                                         `json:"dhcpV6OptionsUUID,omitempty"`
	U2OInterconnectionIP   *string                                         `json:"u2oInterconnectionIP,omitempty"`
	U2OInterconnectionMAC  *string                                         `json:"u2oInterconnectionMAC,omitempty"`
	U2OInterconnectionVPC  *string                                         `json:"u2oInterconnectionVPC,omitempty"`
	NatOutgoingPolicyRules []NatOutgoingPolicyRuleStatusApplyConfiguration `json:"natOutgoingPolicyRules,omitempty"`
	McastQuerierIP         *string                                         `json:"mcastQuerierIP,omitempty"`
	McastQuerierMAC        *string                                         `json:"mcastQuerierMAC,omitempty"`
}

// SubnetStatusApplyConfiguration constructs a declarative configuration of the SubnetStatus type for use with
// apply.
func SubnetStatus() *SubnetStatusApplyConfiguration {
	return &SubnetStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SubnetStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *SubnetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithV4AvailableIPs sets the V4AvailableIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4AvailableIPs field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV4AvailableIPs(value float64) *SubnetStatusApplyConfiguration {
	b.V4AvailableIPs = &value
	return b
}

// WithV4AvailableIPRange sets the V4AvailableIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4AvailableIPRange field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV4AvailableIPRange(value string) *SubnetStatusApplyConfiguration {
	b.V4AvailableIPRange = &value
	return b
}

// WithV4UsingIPs sets the V4UsingIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4UsingIPs field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV4UsingIPs(value float64) *SubnetStatusApplyConfiguration {
	b.V4UsingIPs = &value
	return b
}

// WithV4UsingIPRange sets the V4UsingIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4UsingIPRange field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV4UsingIPRange(value string) *SubnetStatusApplyConfiguration {
	b.V4UsingIPRange = &value
	return b
}

// WithV6AvailableIPs sets the V6AvailableIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6AvailableIPs field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV6AvailableIPs(value float64) *SubnetStatusApplyConfiguration {
	b.V6AvailableIPs = &value
	return b
}

// WithV6AvailableIPRange sets the V6AvailableIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6AvailableIPRange field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV6AvailableIPRange(value string) *SubnetStatusApplyConfiguration {
	b.V6AvailableIPRange = &value
	return b
}

// WithV6UsingIPs sets the V6UsingIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6UsingIPs field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV6UsingIPs(value float64) *SubnetStatusApplyConfiguration {
	b.V6UsingIPs = &value
	return b
}

// WithV6UsingIPRange sets the V6UsingIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6UsingIPRange field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithV6UsingIPRange(value string) *SubnetStatusApplyConfiguration {
	b.V6UsingIPRange = &value
	return b
}

// WithActivateGateway sets the ActivateGateway field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActivateGateway field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithActivateGateway(value string) *SubnetStatusApplyConfiguration {
	b.ActivateGateway = &value
	return b
}

// WithDHCPv4OptionsUUID sets the DHCPv4OptionsUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DHCPv4OptionsUUID field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithDHCPv4OptionsUUID(value string) *SubnetStatusApplyConfiguration {
	b.DHCPv4OptionsUUID = &value
	return b
}

// WithDHCPv6OptionsUUID sets the DHCPv6OptionsUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DHCPv6OptionsUUID field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithDHCPv6OptionsUUID(value string) *SubnetStatusApplyConfiguration {
	b.DHCPv6OptionsUUID = &value
	return b
}

// WithU2OInterconnectionIP sets the U2OInterconnectionIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the U2OInterconnectionIP field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithU2OInterconnectionIP(value string) *SubnetStatusApplyConfiguration {
	b.U2OInterconnectionIP = &value
	return b
}

// WithU2OInterconnectionMAC sets the U2OInterconnectionMAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the U2OInterconnectionMAC field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithU2OInterconnectionMAC(value string) *SubnetStatusApplyConfiguration {
	b.U2OInterconnectionMAC = &value
	return b
}

// WithU2OInterconnectionVPC sets the U2OInterconnectionVPC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the U2OInterconnectionVPC field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithU2OInterconnectionVPC(value string) *SubnetStatusApplyConfiguration {
	b.U2OInterconnectionVPC = &value
	return b
}

// WithNatOutgoingPolicyRules adds the given value to the NatOutgoingPolicyRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NatOutgoingPolicyRules field.
func (b *SubnetStatusApplyConfiguration) WithNatOutgoingPolicyRules(values ...*NatOutgoingPolicyRuleStatusApplyConfiguration) *SubnetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNatOutgoingPolicyRules")
		}
		b.NatOutgoingPolicyRules = append(b.NatOutgoingPolicyRules, *values[i])
	}
	return b
}

// WithMcastQuerierIP sets the McastQuerierIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the McastQuerierIP field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithMcastQuerierIP(value string) *SubnetStatusApplyConfiguration {
	b.McastQuerierIP = &value
	return b
}

// WithMcastQuerierMAC sets the McastQuerierMAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the McastQuerierMAC field is set to the value of the last call.
func (b *SubnetStatusApplyConfiguration) WithMcastQuerierMAC(value string) *SubnetStatusApplyConfiguration {
	b.McastQuerierMAC = &value
	return b
}
