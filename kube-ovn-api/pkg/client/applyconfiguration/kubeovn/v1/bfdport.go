// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// BFDPortApplyConfiguration represents a declarative configuration of the BFDPort type for use
// with apply.
type BFDPortApplyConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`
	// ip address(es) of the BFD port
	IP *string `json:"ip,omitempty"`
	// optional node selector used to select the nodes where the BFD LRP will be hosted
	// if not specified, at most 3 nodes will be selected
	NodeSelector *metav1.LabelSelectorApplyConfiguration `json:"nodeSelector,omitempty"`
}

// BFDPortApplyConfiguration constructs a declarative configuration of the BFDPort type for use with
// apply.
func BFDPort() *BFDPortApplyConfiguration {
	return &BFDPortApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *BFDPortApplyConfiguration) WithEnabled(value bool) *BFDPortApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *BFDPortApplyConfiguration) WithIP(value string) *BFDPortApplyConfiguration {
	b.IP = &value
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *BFDPortApplyConfiguration) WithNodeSelector(value *metav1.LabelSelectorApplyConfiguration) *BFDPortApplyConfiguration {
	b.NodeSelector = value
	return b
}
