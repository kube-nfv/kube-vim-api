// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// OvnEipStatusApplyConfiguration represents a declarative configuration of the OvnEipStatus type for use
// with apply.
type OvnEipStatusApplyConfiguration struct {
	// Conditions represents the latest state of the object
	Conditions []ConditionApplyConfiguration `json:"conditions,omitempty"`
	Type       *string                       `json:"type,omitempty"`
	Nat        *string                       `json:"nat,omitempty"`
	Ready      *bool                         `json:"ready,omitempty"`
	V4Ip       *string                       `json:"v4Ip,omitempty"`
	V6Ip       *string                       `json:"v6Ip,omitempty"`
	MacAddress *string                       `json:"macAddress,omitempty"`
}

// OvnEipStatusApplyConfiguration constructs a declarative configuration of the OvnEipStatus type for use with
// apply.
func OvnEipStatus() *OvnEipStatusApplyConfiguration {
	return &OvnEipStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *OvnEipStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *OvnEipStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithType(value string) *OvnEipStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithNat sets the Nat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Nat field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithNat(value string) *OvnEipStatusApplyConfiguration {
	b.Nat = &value
	return b
}

// WithReady sets the Ready field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ready field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithReady(value bool) *OvnEipStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// WithV4Ip sets the V4Ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4Ip field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithV4Ip(value string) *OvnEipStatusApplyConfiguration {
	b.V4Ip = &value
	return b
}

// WithV6Ip sets the V6Ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6Ip field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithV6Ip(value string) *OvnEipStatusApplyConfiguration {
	b.V6Ip = &value
	return b
}

// WithMacAddress sets the MacAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MacAddress field is set to the value of the last call.
func (b *OvnEipStatusApplyConfiguration) WithMacAddress(value string) *OvnEipStatusApplyConfiguration {
	b.MacAddress = &value
	return b
}
