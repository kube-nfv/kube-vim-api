// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VpcEgressWorkloadApplyConfiguration represents a declarative configuration of the VpcEgressWorkload type for use
// with apply.
type VpcEgressWorkloadApplyConfiguration struct {
	APIVersion *string `json:"apiVersion,omitempty"`
	Kind       *string `json:"kind,omitempty"`
	Name       *string `json:"name,omitempty"`
	// nodes where the workload is running
	Nodes []string `json:"nodes,omitempty"`
}

// VpcEgressWorkloadApplyConfiguration constructs a declarative configuration of the VpcEgressWorkload type for use with
// apply.
func VpcEgressWorkload() *VpcEgressWorkloadApplyConfiguration {
	return &VpcEgressWorkloadApplyConfiguration{}
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *VpcEgressWorkloadApplyConfiguration) WithAPIVersion(value string) *VpcEgressWorkloadApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *VpcEgressWorkloadApplyConfiguration) WithKind(value string) *VpcEgressWorkloadApplyConfiguration {
	b.Kind = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *VpcEgressWorkloadApplyConfiguration) WithName(value string) *VpcEgressWorkloadApplyConfiguration {
	b.Name = &value
	return b
}

// WithNodes adds the given value to the Nodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Nodes field.
func (b *VpcEgressWorkloadApplyConfiguration) WithNodes(values ...string) *VpcEgressWorkloadApplyConfiguration {
	for i := range values {
		b.Nodes = append(b.Nodes, values[i])
	}
	return b
}
