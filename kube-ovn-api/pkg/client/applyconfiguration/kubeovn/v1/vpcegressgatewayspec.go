// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VpcEgressGatewaySpecApplyConfiguration represents a declarative configuration of the VpcEgressGatewaySpec type for use
// with apply.
type VpcEgressGatewaySpecApplyConfiguration struct {
	// optional VPC name
	// if not specified, the default VPC will be used
	VPC *string `json:"vpc,omitempty"`
	// workload replicas
	Replicas *int32 `json:"replicas,omitempty"`
	// optional name prefix used to generate the workload
	// the workload name will be generated as <prefix><vpc-egress-gateway-name>
	Prefix *string `json:"prefix,omitempty"`
	// optional image used by the workload
	// if not specified, the default image passed in by kube-ovn-controller will be used
	Image *string `json:"image,omitempty"`
	// optional internal subnet used to create the workload
	// if not specified, the workload will be created in the default subnet of the VPC
	InternalSubnet *string `json:"internalSubnet,omitempty"`
	// external subnet used to create the workload
	ExternalSubnet *string `json:"externalSubnet,omitempty"`
	// optional internal/external IPs used to create the workload
	// these IPs must be in the internal/external subnet
	// the IPs count must NOT be less than the replicas count
	InternalIPs []string `json:"internalIPs,omitempty"`
	ExternalIPs []string `json:"externalIPs,omitempty"`
	// namespace/pod selectors
	Selectors []VpcEgressGatewaySelectorApplyConfiguration `json:"selectors,omitempty"`
	// optional traffic policy used to control the traffic routing
	// if not specified, the default traffic policy "Cluster" will be used
	// if set to "Local", traffic will be routed to the gateway pod/instance on the same node when available
	// currently it works only for the default vpc
	TrafficPolicy *string `json:"trafficPolicy,omitempty"`
	// BFD configuration
	BFD *VpcEgressGatewayBFDConfigApplyConfiguration `json:"bfd,omitempty"`
	// egress policies
	// at least one policy must be specified
	Policies []VpcEgressGatewayPolicyApplyConfiguration `json:"policies,omitempty"`
	// optional node selector used to select the nodes where the workload will be running
	NodeSelector []VpcEgressGatewayNodeSelectorApplyConfiguration `json:"nodeSelector,omitempty"`
}

// VpcEgressGatewaySpecApplyConfiguration constructs a declarative configuration of the VpcEgressGatewaySpec type for use with
// apply.
func VpcEgressGatewaySpec() *VpcEgressGatewaySpecApplyConfiguration {
	return &VpcEgressGatewaySpecApplyConfiguration{}
}

// WithVPC sets the VPC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VPC field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithVPC(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.VPC = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithReplicas(value int32) *VpcEgressGatewaySpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithPrefix sets the Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prefix field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithPrefix(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.Prefix = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithImage(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithInternalSubnet sets the InternalSubnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InternalSubnet field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithInternalSubnet(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.InternalSubnet = &value
	return b
}

// WithExternalSubnet sets the ExternalSubnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalSubnet field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithExternalSubnet(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.ExternalSubnet = &value
	return b
}

// WithInternalIPs adds the given value to the InternalIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InternalIPs field.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithInternalIPs(values ...string) *VpcEgressGatewaySpecApplyConfiguration {
	for i := range values {
		b.InternalIPs = append(b.InternalIPs, values[i])
	}
	return b
}

// WithExternalIPs adds the given value to the ExternalIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalIPs field.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithExternalIPs(values ...string) *VpcEgressGatewaySpecApplyConfiguration {
	for i := range values {
		b.ExternalIPs = append(b.ExternalIPs, values[i])
	}
	return b
}

// WithSelectors adds the given value to the Selectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selectors field.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithSelectors(values ...*VpcEgressGatewaySelectorApplyConfiguration) *VpcEgressGatewaySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSelectors")
		}
		b.Selectors = append(b.Selectors, *values[i])
	}
	return b
}

// WithTrafficPolicy sets the TrafficPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrafficPolicy field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithTrafficPolicy(value string) *VpcEgressGatewaySpecApplyConfiguration {
	b.TrafficPolicy = &value
	return b
}

// WithBFD sets the BFD field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BFD field is set to the value of the last call.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithBFD(value *VpcEgressGatewayBFDConfigApplyConfiguration) *VpcEgressGatewaySpecApplyConfiguration {
	b.BFD = value
	return b
}

// WithPolicies adds the given value to the Policies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Policies field.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithPolicies(values ...*VpcEgressGatewayPolicyApplyConfiguration) *VpcEgressGatewaySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPolicies")
		}
		b.Policies = append(b.Policies, *values[i])
	}
	return b
}

// WithNodeSelector adds the given value to the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodeSelector field.
func (b *VpcEgressGatewaySpecApplyConfiguration) WithNodeSelector(values ...*VpcEgressGatewayNodeSelectorApplyConfiguration) *VpcEgressGatewaySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodeSelector")
		}
		b.NodeSelector = append(b.NodeSelector, *values[i])
	}
	return b
}
