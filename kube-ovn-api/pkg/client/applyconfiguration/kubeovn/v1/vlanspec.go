// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VlanSpecApplyConfiguration represents a declarative configuration of the VlanSpec type for use
// with apply.
type VlanSpecApplyConfiguration struct {
	// deprecated fields, use ID & Provider instead
	VlanID                *int    `json:"vlanId,omitempty"`
	ProviderInterfaceName *string `json:"providerInterfaceName,omitempty"`
	ID                    *int    `json:"id,omitempty"`
	Provider              *string `json:"provider,omitempty"`
}

// VlanSpecApplyConfiguration constructs a declarative configuration of the VlanSpec type for use with
// apply.
func VlanSpec() *VlanSpecApplyConfiguration {
	return &VlanSpecApplyConfiguration{}
}

// WithVlanID sets the VlanID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VlanID field is set to the value of the last call.
func (b *VlanSpecApplyConfiguration) WithVlanID(value int) *VlanSpecApplyConfiguration {
	b.VlanID = &value
	return b
}

// WithProviderInterfaceName sets the ProviderInterfaceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProviderInterfaceName field is set to the value of the last call.
func (b *VlanSpecApplyConfiguration) WithProviderInterfaceName(value string) *VlanSpecApplyConfiguration {
	b.ProviderInterfaceName = &value
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *VlanSpecApplyConfiguration) WithID(value int) *VlanSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *VlanSpecApplyConfiguration) WithProvider(value string) *VlanSpecApplyConfiguration {
	b.Provider = &value
	return b
}
