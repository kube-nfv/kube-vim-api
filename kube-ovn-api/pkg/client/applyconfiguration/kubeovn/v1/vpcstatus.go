// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// VpcStatusApplyConfiguration represents a declarative configuration of the VpcStatus type for use
// with apply.
type VpcStatusApplyConfiguration struct {
	// Conditions represents the latest state of the object
	Conditions              []ConditionApplyConfiguration    `json:"conditions,omitempty"`
	Standby                 *bool                            `json:"standby,omitempty"`
	Default                 *bool                            `json:"default,omitempty"`
	DefaultLogicalSwitch    *string                          `json:"defaultLogicalSwitch,omitempty"`
	Router                  *string                          `json:"router,omitempty"`
	TCPLoadBalancer         *string                          `json:"tcpLoadBalancer,omitempty"`
	UDPLoadBalancer         *string                          `json:"udpLoadBalancer,omitempty"`
	SctpLoadBalancer        *string                          `json:"sctpLoadBalancer,omitempty"`
	TCPSessionLoadBalancer  *string                          `json:"tcpSessionLoadBalancer,omitempty"`
	UDPSessionLoadBalancer  *string                          `json:"udpSessionLoadBalancer,omitempty"`
	SctpSessionLoadBalancer *string                          `json:"sctpSessionLoadBalancer,omitempty"`
	Subnets                 []string                         `json:"subnets,omitempty"`
	VpcPeerings             []string                         `json:"vpcPeerings,omitempty"`
	EnableExternal          *bool                            `json:"enableExternal,omitempty"`
	ExtraExternalSubnets    []string                         `json:"extraExternalSubnets,omitempty"`
	EnableBfd               *bool                            `json:"enableBfd,omitempty"`
	BFDPort                 *BFDPortStatusApplyConfiguration `json:"bfdPort,omitempty"`
}

// VpcStatusApplyConfiguration constructs a declarative configuration of the VpcStatus type for use with
// apply.
func VpcStatus() *VpcStatusApplyConfiguration {
	return &VpcStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *VpcStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *VpcStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithStandby sets the Standby field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Standby field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithStandby(value bool) *VpcStatusApplyConfiguration {
	b.Standby = &value
	return b
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithDefault(value bool) *VpcStatusApplyConfiguration {
	b.Default = &value
	return b
}

// WithDefaultLogicalSwitch sets the DefaultLogicalSwitch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefaultLogicalSwitch field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithDefaultLogicalSwitch(value string) *VpcStatusApplyConfiguration {
	b.DefaultLogicalSwitch = &value
	return b
}

// WithRouter sets the Router field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Router field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithRouter(value string) *VpcStatusApplyConfiguration {
	b.Router = &value
	return b
}

// WithTCPLoadBalancer sets the TCPLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TCPLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithTCPLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.TCPLoadBalancer = &value
	return b
}

// WithUDPLoadBalancer sets the UDPLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UDPLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithUDPLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.UDPLoadBalancer = &value
	return b
}

// WithSctpLoadBalancer sets the SctpLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SctpLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithSctpLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.SctpLoadBalancer = &value
	return b
}

// WithTCPSessionLoadBalancer sets the TCPSessionLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TCPSessionLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithTCPSessionLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.TCPSessionLoadBalancer = &value
	return b
}

// WithUDPSessionLoadBalancer sets the UDPSessionLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UDPSessionLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithUDPSessionLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.UDPSessionLoadBalancer = &value
	return b
}

// WithSctpSessionLoadBalancer sets the SctpSessionLoadBalancer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SctpSessionLoadBalancer field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithSctpSessionLoadBalancer(value string) *VpcStatusApplyConfiguration {
	b.SctpSessionLoadBalancer = &value
	return b
}

// WithSubnets adds the given value to the Subnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subnets field.
func (b *VpcStatusApplyConfiguration) WithSubnets(values ...string) *VpcStatusApplyConfiguration {
	for i := range values {
		b.Subnets = append(b.Subnets, values[i])
	}
	return b
}

// WithVpcPeerings adds the given value to the VpcPeerings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VpcPeerings field.
func (b *VpcStatusApplyConfiguration) WithVpcPeerings(values ...string) *VpcStatusApplyConfiguration {
	for i := range values {
		b.VpcPeerings = append(b.VpcPeerings, values[i])
	}
	return b
}

// WithEnableExternal sets the EnableExternal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableExternal field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithEnableExternal(value bool) *VpcStatusApplyConfiguration {
	b.EnableExternal = &value
	return b
}

// WithExtraExternalSubnets adds the given value to the ExtraExternalSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtraExternalSubnets field.
func (b *VpcStatusApplyConfiguration) WithExtraExternalSubnets(values ...string) *VpcStatusApplyConfiguration {
	for i := range values {
		b.ExtraExternalSubnets = append(b.ExtraExternalSubnets, values[i])
	}
	return b
}

// WithEnableBfd sets the EnableBfd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableBfd field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithEnableBfd(value bool) *VpcStatusApplyConfiguration {
	b.EnableBfd = &value
	return b
}

// WithBFDPort sets the BFDPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BFDPort field is set to the value of the last call.
func (b *VpcStatusApplyConfiguration) WithBFDPort(value *BFDPortStatusApplyConfiguration) *VpcStatusApplyConfiguration {
	b.BFDPort = value
	return b
}
