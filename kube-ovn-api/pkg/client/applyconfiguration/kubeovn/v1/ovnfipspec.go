// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// OvnFipSpecApplyConfiguration represents a declarative configuration of the OvnFipSpec type for use
// with apply.
type OvnFipSpecApplyConfiguration struct {
	OvnEip *string `json:"ovnEip,omitempty"`
	IPType *string `json:"ipType,omitempty"`
	// vip, ip
	IPName *string `json:"ipName,omitempty"`
	// vip, ip crd name
	Vpc  *string `json:"vpc,omitempty"`
	V4Ip *string `json:"v4Ip,omitempty"`
	V6Ip *string `json:"v6Ip,omitempty"`
	Type *string `json:"type,omitempty"`
}

// OvnFipSpecApplyConfiguration constructs a declarative configuration of the OvnFipSpec type for use with
// apply.
func OvnFipSpec() *OvnFipSpecApplyConfiguration {
	return &OvnFipSpecApplyConfiguration{}
}

// WithOvnEip sets the OvnEip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OvnEip field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithOvnEip(value string) *OvnFipSpecApplyConfiguration {
	b.OvnEip = &value
	return b
}

// WithIPType sets the IPType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPType field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithIPType(value string) *OvnFipSpecApplyConfiguration {
	b.IPType = &value
	return b
}

// WithIPName sets the IPName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPName field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithIPName(value string) *OvnFipSpecApplyConfiguration {
	b.IPName = &value
	return b
}

// WithVpc sets the Vpc field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vpc field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithVpc(value string) *OvnFipSpecApplyConfiguration {
	b.Vpc = &value
	return b
}

// WithV4Ip sets the V4Ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4Ip field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithV4Ip(value string) *OvnFipSpecApplyConfiguration {
	b.V4Ip = &value
	return b
}

// WithV6Ip sets the V6Ip field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6Ip field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithV6Ip(value string) *OvnFipSpecApplyConfiguration {
	b.V6Ip = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *OvnFipSpecApplyConfiguration) WithType(value string) *OvnFipSpecApplyConfiguration {
	b.Type = &value
	return b
}
