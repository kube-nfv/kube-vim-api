// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// VpcEgressGatewayNodeSelectorApplyConfiguration represents a declarative configuration of the VpcEgressGatewayNodeSelector type for use
// with apply.
type VpcEgressGatewayNodeSelectorApplyConfiguration struct {
	MatchLabels      map[string]string                `json:"matchLabels,omitempty"`
	MatchExpressions []corev1.NodeSelectorRequirement `json:"matchExpressions,omitempty"`
	MatchFields      []corev1.NodeSelectorRequirement `json:"matchFields,omitempty"`
}

// VpcEgressGatewayNodeSelectorApplyConfiguration constructs a declarative configuration of the VpcEgressGatewayNodeSelector type for use with
// apply.
func VpcEgressGatewayNodeSelector() *VpcEgressGatewayNodeSelectorApplyConfiguration {
	return &VpcEgressGatewayNodeSelectorApplyConfiguration{}
}

// WithMatchLabels puts the entries into the MatchLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the MatchLabels field,
// overwriting an existing map entries in MatchLabels field with the same key.
func (b *VpcEgressGatewayNodeSelectorApplyConfiguration) WithMatchLabels(entries map[string]string) *VpcEgressGatewayNodeSelectorApplyConfiguration {
	if b.MatchLabels == nil && len(entries) > 0 {
		b.MatchLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.MatchLabels[k] = v
	}
	return b
}

// WithMatchExpressions adds the given value to the MatchExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchExpressions field.
func (b *VpcEgressGatewayNodeSelectorApplyConfiguration) WithMatchExpressions(values ...corev1.NodeSelectorRequirement) *VpcEgressGatewayNodeSelectorApplyConfiguration {
	for i := range values {
		b.MatchExpressions = append(b.MatchExpressions, values[i])
	}
	return b
}

// WithMatchFields adds the given value to the MatchFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchFields field.
func (b *VpcEgressGatewayNodeSelectorApplyConfiguration) WithMatchFields(values ...corev1.NodeSelectorRequirement) *VpcEgressGatewayNodeSelectorApplyConfiguration {
	for i := range values {
		b.MatchFields = append(b.MatchFields, values[i])
	}
	return b
}
