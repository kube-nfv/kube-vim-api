// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	internal "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/internal"
)

// IPPoolStatusApplyConfiguration represents a declarative configuration of the IPPoolStatus type for use
// with apply.
type IPPoolStatusApplyConfiguration struct {
	V4AvailableIPs     *internal.BigInt `json:"v4AvailableIPs,omitempty"`
	V4AvailableIPRange *string          `json:"v4AvailableIPRange,omitempty"`
	V4UsingIPs         *internal.BigInt `json:"v4UsingIPs,omitempty"`
	V4UsingIPRange     *string          `json:"v4UsingIPRange,omitempty"`
	V6AvailableIPs     *internal.BigInt `json:"v6AvailableIPs,omitempty"`
	V6AvailableIPRange *string          `json:"v6AvailableIPRange,omitempty"`
	V6UsingIPs         *internal.BigInt `json:"v6UsingIPs,omitempty"`
	V6UsingIPRange     *string          `json:"v6UsingIPRange,omitempty"`
	// Conditions represents the latest state of the object
	Conditions []ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// IPPoolStatusApplyConfiguration constructs a declarative configuration of the IPPoolStatus type for use with
// apply.
func IPPoolStatus() *IPPoolStatusApplyConfiguration {
	return &IPPoolStatusApplyConfiguration{}
}

// WithV4AvailableIPs sets the V4AvailableIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4AvailableIPs field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV4AvailableIPs(value internal.BigInt) *IPPoolStatusApplyConfiguration {
	b.V4AvailableIPs = &value
	return b
}

// WithV4AvailableIPRange sets the V4AvailableIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4AvailableIPRange field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV4AvailableIPRange(value string) *IPPoolStatusApplyConfiguration {
	b.V4AvailableIPRange = &value
	return b
}

// WithV4UsingIPs sets the V4UsingIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4UsingIPs field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV4UsingIPs(value internal.BigInt) *IPPoolStatusApplyConfiguration {
	b.V4UsingIPs = &value
	return b
}

// WithV4UsingIPRange sets the V4UsingIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V4UsingIPRange field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV4UsingIPRange(value string) *IPPoolStatusApplyConfiguration {
	b.V4UsingIPRange = &value
	return b
}

// WithV6AvailableIPs sets the V6AvailableIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6AvailableIPs field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV6AvailableIPs(value internal.BigInt) *IPPoolStatusApplyConfiguration {
	b.V6AvailableIPs = &value
	return b
}

// WithV6AvailableIPRange sets the V6AvailableIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6AvailableIPRange field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV6AvailableIPRange(value string) *IPPoolStatusApplyConfiguration {
	b.V6AvailableIPRange = &value
	return b
}

// WithV6UsingIPs sets the V6UsingIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6UsingIPs field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV6UsingIPs(value internal.BigInt) *IPPoolStatusApplyConfiguration {
	b.V6UsingIPs = &value
	return b
}

// WithV6UsingIPRange sets the V6UsingIPRange field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the V6UsingIPRange field is set to the value of the last call.
func (b *IPPoolStatusApplyConfiguration) WithV6UsingIPRange(value string) *IPPoolStatusApplyConfiguration {
	b.V6UsingIPRange = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *IPPoolStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *IPPoolStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
