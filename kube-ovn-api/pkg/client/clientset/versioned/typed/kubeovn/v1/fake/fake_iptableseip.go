// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeIptablesEIPs implements IptablesEIPInterface
type fakeIptablesEIPs struct {
	*gentype.FakeClientWithListAndApply[*v1.IptablesEIP, *v1.IptablesEIPList, *kubeovnv1.IptablesEIPApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeIptablesEIPs(fake *FakeKubeovnV1) typedkubeovnv1.IptablesEIPInterface {
	return &fakeIptablesEIPs{
		gentype.NewFakeClientWithListAndApply[*v1.IptablesEIP, *v1.IptablesEIPList, *kubeovnv1.IptablesEIPApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("iptables-eips"),
			v1.SchemeGroupVersion.WithKind("IptablesEIP"),
			func() *v1.IptablesEIP { return &v1.IptablesEIP{} },
			func() *v1.IptablesEIPList { return &v1.IptablesEIPList{} },
			func(dst, src *v1.IptablesEIPList) { dst.ListMeta = src.ListMeta },
			func(list *v1.IptablesEIPList) []*v1.IptablesEIP { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.IptablesEIPList, items []*v1.IptablesEIP) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
