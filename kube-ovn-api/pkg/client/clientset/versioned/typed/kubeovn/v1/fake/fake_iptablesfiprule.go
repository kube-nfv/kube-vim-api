// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeIptablesFIPRules implements IptablesFIPRuleInterface
type fakeIptablesFIPRules struct {
	*gentype.FakeClientWithListAndApply[*v1.IptablesFIPRule, *v1.IptablesFIPRuleList, *kubeovnv1.IptablesFIPRuleApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeIptablesFIPRules(fake *FakeKubeovnV1) typedkubeovnv1.IptablesFIPRuleInterface {
	return &fakeIptablesFIPRules{
		gentype.NewFakeClientWithListAndApply[*v1.IptablesFIPRule, *v1.IptablesFIPRuleList, *kubeovnv1.IptablesFIPRuleApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("iptables-fip-rules"),
			v1.SchemeGroupVersion.WithKind("IptablesFIPRule"),
			func() *v1.IptablesFIPRule { return &v1.IptablesFIPRule{} },
			func() *v1.IptablesFIPRuleList { return &v1.IptablesFIPRuleList{} },
			func(dst, src *v1.IptablesFIPRuleList) { dst.ListMeta = src.ListMeta },
			func(list *v1.IptablesFIPRuleList) []*v1.IptablesFIPRule { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.IptablesFIPRuleList, items []*v1.IptablesFIPRule) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
