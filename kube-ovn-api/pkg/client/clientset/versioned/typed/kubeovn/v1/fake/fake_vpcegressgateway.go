// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeVpcEgressGateways implements VpcEgressGatewayInterface
type fakeVpcEgressGateways struct {
	*gentype.FakeClientWithListAndApply[*v1.VpcEgressGateway, *v1.VpcEgressGatewayList, *kubeovnv1.VpcEgressGatewayApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeVpcEgressGateways(fake *FakeKubeovnV1, namespace string) typedkubeovnv1.VpcEgressGatewayInterface {
	return &fakeVpcEgressGateways{
		gentype.NewFakeClientWithListAndApply[*v1.VpcEgressGateway, *v1.VpcEgressGatewayList, *kubeovnv1.VpcEgressGatewayApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("vpc-egress-gateways"),
			v1.SchemeGroupVersion.WithKind("VpcEgressGateway"),
			func() *v1.VpcEgressGateway { return &v1.VpcEgressGateway{} },
			func() *v1.VpcEgressGatewayList { return &v1.VpcEgressGatewayList{} },
			func(dst, src *v1.VpcEgressGatewayList) { dst.ListMeta = src.ListMeta },
			func(list *v1.VpcEgressGatewayList) []*v1.VpcEgressGateway { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.VpcEgressGatewayList, items []*v1.VpcEgressGateway) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetScale takes name of the vpcEgressGateway, and returns the corresponding scale object, and an error if there is any.
func (c *fakeVpcEgressGateways) GetScale(ctx context.Context, vpcEgressGatewayName string, options metav1.GetOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "scale", vpcEgressGatewayName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *fakeVpcEgressGateways) UpdateScale(ctx context.Context, vpcEgressGatewayName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(c.Resource(), "scale", c.Namespace(), scale, opts), &autoscalingv1.Scale{})

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}
