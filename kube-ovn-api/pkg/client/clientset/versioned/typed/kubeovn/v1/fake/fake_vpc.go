// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeVpcs implements VpcInterface
type fakeVpcs struct {
	*gentype.FakeClientWithListAndApply[*v1.Vpc, *v1.VpcList, *kubeovnv1.VpcApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeVpcs(fake *FakeKubeovnV1) typedkubeovnv1.VpcInterface {
	return &fakeVpcs{
		gentype.NewFakeClientWithListAndApply[*v1.Vpc, *v1.VpcList, *kubeovnv1.VpcApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("vpcs"),
			v1.SchemeGroupVersion.WithKind("Vpc"),
			func() *v1.Vpc { return &v1.Vpc{} },
			func() *v1.VpcList { return &v1.VpcList{} },
			func(dst, src *v1.VpcList) { dst.ListMeta = src.ListMeta },
			func(list *v1.VpcList) []*v1.Vpc { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.VpcList, items []*v1.Vpc) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
