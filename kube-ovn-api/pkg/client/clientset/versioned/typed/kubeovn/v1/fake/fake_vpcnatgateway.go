// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeVpcNatGateways implements VpcNatGatewayInterface
type fakeVpcNatGateways struct {
	*gentype.FakeClientWithListAndApply[*v1.VpcNatGateway, *v1.VpcNatGatewayList, *kubeovnv1.VpcNatGatewayApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeVpcNatGateways(fake *FakeKubeovnV1) typedkubeovnv1.VpcNatGatewayInterface {
	return &fakeVpcNatGateways{
		gentype.NewFakeClientWithListAndApply[*v1.VpcNatGateway, *v1.VpcNatGatewayList, *kubeovnv1.VpcNatGatewayApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("vpc-nat-gateways"),
			v1.SchemeGroupVersion.WithKind("VpcNatGateway"),
			func() *v1.VpcNatGateway { return &v1.VpcNatGateway{} },
			func() *v1.VpcNatGatewayList { return &v1.VpcNatGatewayList{} },
			func(dst, src *v1.VpcNatGatewayList) { dst.ListMeta = src.ListMeta },
			func(list *v1.VpcNatGatewayList) []*v1.VpcNatGateway { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.VpcNatGatewayList, items []*v1.VpcNatGateway) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
