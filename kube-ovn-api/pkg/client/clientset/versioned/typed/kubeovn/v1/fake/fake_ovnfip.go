// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/applyconfiguration/kubeovn/v1"
	typedkubeovnv1 "github.com/kube-nfv/kube-vim-api/kube-ovn-api/pkg/client/clientset/versioned/typed/kubeovn/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeOvnFips implements OvnFipInterface
type fakeOvnFips struct {
	*gentype.FakeClientWithListAndApply[*v1.OvnFip, *v1.OvnFipList, *kubeovnv1.OvnFipApplyConfiguration]
	Fake *FakeKubeovnV1
}

func newFakeOvnFips(fake *FakeKubeovnV1) typedkubeovnv1.OvnFipInterface {
	return &fakeOvnFips{
		gentype.NewFakeClientWithListAndApply[*v1.OvnFip, *v1.OvnFipList, *kubeovnv1.OvnFipApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("ovn-fips"),
			v1.SchemeGroupVersion.WithKind("OvnFip"),
			func() *v1.OvnFip { return &v1.OvnFip{} },
			func() *v1.OvnFipList { return &v1.OvnFipList{} },
			func(dst, src *v1.OvnFipList) { dst.ListMeta = src.ListMeta },
			func(list *v1.OvnFipList) []*v1.OvnFip { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.OvnFipList, items []*v1.OvnFip) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
