// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.1
// source: admin/types.proto

package admin

import (
	apis "github.com/kube-nfv/kube-vim-api/pkg/apis"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported image source types
type ImageSourceType int32

const (
	ImageSourceType_HTTP     ImageSourceType = 0
	ImageSourceType_REGISTRY ImageSourceType = 1
	ImageSourceType_PVC      ImageSourceType = 2
	ImageSourceType_S3       ImageSourceType = 3
)

// Enum value maps for ImageSourceType.
var (
	ImageSourceType_name = map[int32]string{
		0: "HTTP",
		1: "REGISTRY",
		2: "PVC",
		3: "S3",
	}
	ImageSourceType_value = map[string]int32{
		"HTTP":     0,
		"REGISTRY": 1,
		"PVC":      2,
		"S3":       3,
	}
)

func (x ImageSourceType) Enum() *ImageSourceType {
	p := new(ImageSourceType)
	*p = x
	return p
}

func (x ImageSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_types_proto_enumTypes[0].Descriptor()
}

func (ImageSourceType) Type() protoreflect.EnumType {
	return &file_admin_types_proto_enumTypes[0]
}

func (x ImageSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSourceType.Descriptor instead.
func (ImageSourceType) EnumDescriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{0}
}

// Pull policy for container images
type PullPolicy int32

const (
	PullPolicy_ALWAYS         PullPolicy = 0
	PullPolicy_IF_NOT_PRESENT PullPolicy = 1
	PullPolicy_NEVER          PullPolicy = 2
)

// Enum value maps for PullPolicy.
var (
	PullPolicy_name = map[int32]string{
		0: "ALWAYS",
		1: "IF_NOT_PRESENT",
		2: "NEVER",
	}
	PullPolicy_value = map[string]int32{
		"ALWAYS":         0,
		"IF_NOT_PRESENT": 1,
		"NEVER":          2,
	}
)

func (x PullPolicy) Enum() *PullPolicy {
	p := new(PullPolicy)
	*p = x
	return p
}

func (x PullPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PullPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_types_proto_enumTypes[1].Descriptor()
}

func (PullPolicy) Type() protoreflect.EnumType {
	return &file_admin_types_proto_enumTypes[1]
}

func (x PullPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PullPolicy.Descriptor instead.
func (PullPolicy) EnumDescriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{1}
}

// Download operation states
type DownloadState int32

const (
	DownloadState_PENDING         DownloadState = 0 // Download queued but not started
	DownloadState_DOWNLOADING     DownloadState = 1 // Download in progress
	DownloadState_COMPLETED       DownloadState = 2 // Download completed successfully
	DownloadState_FAILED          DownloadState = 3 // Download failed
	DownloadState_CANCELLED       DownloadState = 4 // Download was cancelled
	DownloadState_LAZY_REGISTERED DownloadState = 5 // Image registered for lazy download
)

// Enum value maps for DownloadState.
var (
	DownloadState_name = map[int32]string{
		0: "PENDING",
		1: "DOWNLOADING",
		2: "COMPLETED",
		3: "FAILED",
		4: "CANCELLED",
		5: "LAZY_REGISTERED",
	}
	DownloadState_value = map[string]int32{
		"PENDING":         0,
		"DOWNLOADING":     1,
		"COMPLETED":       2,
		"FAILED":          3,
		"CANCELLED":       4,
		"LAZY_REGISTERED": 5,
	}
)

func (x DownloadState) Enum() *DownloadState {
	p := new(DownloadState)
	*p = x
	return p
}

func (x DownloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_types_proto_enumTypes[2].Descriptor()
}

func (DownloadState) Type() protoreflect.EnumType {
	return &file_admin_types_proto_enumTypes[2]
}

func (x DownloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadState.Descriptor instead.
func (DownloadState) EnumDescriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{2}
}

// Image metadata that must be specified for proper identification
type ImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for the downloaded image - required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the image
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Provider of the image
	Provider *string `protobuf:"bytes,3,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// Version of the image
	Version *string `protobuf:"bytes,4,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Tags associated with the image
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource
	Metadata *apis.Metadata `protobuf:"bytes,6,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadata.ProtoReflect.Descriptor instead.
func (*ImageMetadata) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{0}
}

func (x *ImageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ImageMetadata) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *ImageMetadata) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ImageMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ImageMetadata) GetMetadata() *apis.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Source specification with support for multiple source types
type ImageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of image source
	Type ImageSourceType `protobuf:"varint,1,opt,name=type,proto3,enum=admin.kubevim.kubenfv.api.pb.ImageSourceType" json:"type,omitempty"`
	// HTTP/HTTPS source specification
	Http *HttpSource `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
	// Container registry source specification
	Registry *RegistrySource `protobuf:"bytes,3,opt,name=registry,proto3,oneof" json:"registry,omitempty"`
	// PVC/Volume source specification
	Pvc *PvcSource `protobuf:"bytes,4,opt,name=pvc,proto3,oneof" json:"pvc,omitempty"`
	// S3-compatible source specification
	S3 *S3Source `protobuf:"bytes,5,opt,name=s3,proto3,oneof" json:"s3,omitempty"`
}

func (x *ImageSource) Reset() {
	*x = ImageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSource) ProtoMessage() {}

func (x *ImageSource) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSource.ProtoReflect.Descriptor instead.
func (*ImageSource) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{1}
}

func (x *ImageSource) GetType() ImageSourceType {
	if x != nil {
		return x.Type
	}
	return ImageSourceType_HTTP
}

func (x *ImageSource) GetHttp() *HttpSource {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ImageSource) GetRegistry() *RegistrySource {
	if x != nil {
		return x.Registry
	}
	return nil
}

func (x *ImageSource) GetPvc() *PvcSource {
	if x != nil {
		return x.Pvc
	}
	return nil
}

func (x *ImageSource) GetS3() *S3Source {
	if x != nil {
		return x.S3
	}
	return nil
}

// HTTP/HTTPS source specification
type HttpSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the image to download
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Custom HTTP headers
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether to verify TLS certificates
	VerifyTls *bool `protobuf:"varint,3,opt,name=verifyTls,proto3,oneof" json:"verifyTls,omitempty"`
	// Expected checksum for validation
	Checksum *Checksum `protobuf:"bytes,4,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *HttpSource) Reset() {
	*x = HttpSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpSource) ProtoMessage() {}

func (x *HttpSource) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpSource.ProtoReflect.Descriptor instead.
func (*HttpSource) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{2}
}

func (x *HttpSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpSource) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpSource) GetVerifyTls() bool {
	if x != nil && x.VerifyTls != nil {
		return *x.VerifyTls
	}
	return false
}

func (x *HttpSource) GetChecksum() *Checksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// Container registry source specification
type RegistrySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Container image reference (e.g., "registry.example.com/namespace/image:tag")
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Pull policy for the image
	PullPolicy *PullPolicy `protobuf:"varint,2,opt,name=pullPolicy,proto3,enum=admin.kubevim.kubenfv.api.pb.PullPolicy,oneof" json:"pullPolicy,omitempty"`
	// Platform specification for multi-arch images
	Platform *string `protobuf:"bytes,3,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
}

func (x *RegistrySource) Reset() {
	*x = RegistrySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrySource) ProtoMessage() {}

func (x *RegistrySource) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrySource.ProtoReflect.Descriptor instead.
func (*RegistrySource) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{3}
}

func (x *RegistrySource) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RegistrySource) GetPullPolicy() PullPolicy {
	if x != nil && x.PullPolicy != nil {
		return *x.PullPolicy
	}
	return PullPolicy_ALWAYS
}

func (x *RegistrySource) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

// PVC/Volume source specification
type PvcSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the source PVC
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the source PVC
	Namespace *string `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// Optional path within the volume
	Path *string `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
}

func (x *PvcSource) Reset() {
	*x = PvcSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvcSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvcSource) ProtoMessage() {}

func (x *PvcSource) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvcSource.ProtoReflect.Descriptor instead.
func (*PvcSource) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{4}
}

func (x *PvcSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PvcSource) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *PvcSource) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

// S3-compatible storage source specification
type S3Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// S3 endpoint URL
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// S3 bucket name
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Object key/path
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// AWS region (if applicable)
	Region *string `protobuf:"bytes,4,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// Whether to use path-style URLs
	PathStyle *bool `protobuf:"varint,5,opt,name=pathStyle,proto3,oneof" json:"pathStyle,omitempty"`
}

func (x *S3Source) Reset() {
	*x = S3Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Source) ProtoMessage() {}

func (x *S3Source) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Source.ProtoReflect.Descriptor instead.
func (*S3Source) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{5}
}

func (x *S3Source) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3Source) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Source) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *S3Source) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *S3Source) GetPathStyle() bool {
	if x != nil && x.PathStyle != nil {
		return *x.PathStyle
	}
	return false
}

// Download options and policies
type DownloadOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to download lazily (only when first accessed/used)
	LazyDownload *bool `protobuf:"varint,1,opt,name=lazyDownload,proto3,oneof" json:"lazyDownload,omitempty"`
	// Timeout for the download operation
	Timeout *string `protobuf:"bytes,2,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// Number of retry attempts
	Retries *int32 `protobuf:"varint,3,opt,name=retries,proto3,oneof" json:"retries,omitempty"`
	// Whether to validate checksums
	ValidateChecksum *bool `protobuf:"varint,4,opt,name=validateChecksum,proto3,oneof" json:"validateChecksum,omitempty"`
	// Compression handling (auto, gzip, none)
	Compression *string `protobuf:"bytes,5,opt,name=compression,proto3,oneof" json:"compression,omitempty"`
	// Storage size hint (for pre-allocation)
	StorageSize *string `protobuf:"bytes,6,opt,name=storageSize,proto3,oneof" json:"storageSize,omitempty"`
	// Storage class preference
	StorageClass *string `protobuf:"bytes,7,opt,name=storageClass,proto3,oneof" json:"storageClass,omitempty"`
	// Backend storage hints
	PreferredBackends []string `protobuf:"bytes,8,rep,name=preferredBackends,proto3" json:"preferredBackends,omitempty"`
}

func (x *DownloadOptions) Reset() {
	*x = DownloadOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOptions) ProtoMessage() {}

func (x *DownloadOptions) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOptions.ProtoReflect.Descriptor instead.
func (*DownloadOptions) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadOptions) GetLazyDownload() bool {
	if x != nil && x.LazyDownload != nil {
		return *x.LazyDownload
	}
	return false
}

func (x *DownloadOptions) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *DownloadOptions) GetRetries() int32 {
	if x != nil && x.Retries != nil {
		return *x.Retries
	}
	return 0
}

func (x *DownloadOptions) GetValidateChecksum() bool {
	if x != nil && x.ValidateChecksum != nil {
		return *x.ValidateChecksum
	}
	return false
}

func (x *DownloadOptions) GetCompression() string {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return ""
}

func (x *DownloadOptions) GetStorageSize() string {
	if x != nil && x.StorageSize != nil {
		return *x.StorageSize
	}
	return ""
}

func (x *DownloadOptions) GetStorageClass() string {
	if x != nil && x.StorageClass != nil {
		return *x.StorageClass
	}
	return ""
}

func (x *DownloadOptions) GetPreferredBackends() []string {
	if x != nil {
		return x.PreferredBackends
	}
	return nil
}

// Checksum specification for validation
type Checksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checksum algorithm (sha256, md5, sha1, etc.)
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Expected checksum value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Checksum) Reset() {
	*x = Checksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checksum) ProtoMessage() {}

func (x *Checksum) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checksum.ProtoReflect.Descriptor instead.
func (*Checksum) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{7}
}

func (x *Checksum) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Checksum) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Image download status information
type ImageDownloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image identifier
	ImageId *apis.Identifier `protobuf:"bytes,1,opt,name=imageId,proto3" json:"imageId,omitempty"`
	// Current state of the download operation
	State DownloadState `protobuf:"varint,2,opt,name=state,proto3,enum=admin.kubevim.kubenfv.api.pb.DownloadState" json:"state,omitempty"`
	// Human-readable status message
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Download progress percentage (0-100)
	ProgressPercentage *int32 `protobuf:"varint,4,opt,name=progressPercentage,proto3,oneof" json:"progressPercentage,omitempty"`
	// Timestamp when the download was initiated
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=startedAt,proto3,oneof" json:"startedAt,omitempty"`
	// Timestamp when the download completed (if applicable)
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completedAt,proto3,oneof" json:"completedAt,omitempty"`
	// Error information if the download failed
	ErrorMessage *string `protobuf:"bytes,7,opt,name=errorMessage,proto3,oneof" json:"errorMessage,omitempty"`
	// Download statistics
	Statistics *DownloadStatistics `protobuf:"bytes,8,opt,name=statistics,proto3,oneof" json:"statistics,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related download operation
	Metadata *apis.Metadata `protobuf:"bytes,9,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *ImageDownloadStatus) Reset() {
	*x = ImageDownloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDownloadStatus) ProtoMessage() {}

func (x *ImageDownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDownloadStatus.ProtoReflect.Descriptor instead.
func (*ImageDownloadStatus) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{8}
}

func (x *ImageDownloadStatus) GetImageId() *apis.Identifier {
	if x != nil {
		return x.ImageId
	}
	return nil
}

func (x *ImageDownloadStatus) GetState() DownloadState {
	if x != nil {
		return x.State
	}
	return DownloadState_PENDING
}

func (x *ImageDownloadStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ImageDownloadStatus) GetProgressPercentage() int32 {
	if x != nil && x.ProgressPercentage != nil {
		return *x.ProgressPercentage
	}
	return 0
}

func (x *ImageDownloadStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ImageDownloadStatus) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ImageDownloadStatus) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ImageDownloadStatus) GetStatistics() *DownloadStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ImageDownloadStatus) GetMetadata() *apis.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Download statistics
type DownloadStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes downloaded
	BytesDownloaded *int64 `protobuf:"varint,1,opt,name=bytesDownloaded,proto3,oneof" json:"bytesDownloaded,omitempty"`
	// Total size of the image (if known)
	TotalBytes *int64 `protobuf:"varint,2,opt,name=totalBytes,proto3,oneof" json:"totalBytes,omitempty"`
	// Download speed in bytes per second
	DownloadSpeed *int64 `protobuf:"varint,3,opt,name=downloadSpeed,proto3,oneof" json:"downloadSpeed,omitempty"`
}

func (x *DownloadStatistics) Reset() {
	*x = DownloadStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStatistics) ProtoMessage() {}

func (x *DownloadStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_admin_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStatistics.ProtoReflect.Descriptor instead.
func (*DownloadStatistics) Descriptor() ([]byte, []int) {
	return file_admin_types_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadStatistics) GetBytesDownloaded() int64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return 0
}

func (x *DownloadStatistics) GetTotalBytes() int64 {
	if x != nil && x.TotalBytes != nil {
		return *x.TotalBytes
	}
	return 0
}

func (x *DownloadStatistics) GetDownloadSpeed() int64 {
	if x != nil && x.DownloadSpeed != nil {
		return *x.DownloadSpeed
	}
	return 0
}

var File_admin_types_proto protoreflect.FileDescriptor

var file_admin_types_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76,
	0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x03, 0x0a, 0x0b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x03, 0x70, 0x76, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e,
	0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x76, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x03, 0x70, 0x76, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x33,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x02, 0x73,
	0x33, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x76, 0x63, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x73, 0x33, 0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x54, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x54, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x52, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x50, 0x76, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x53,
	0x33, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22,
	0xe5, 0x03, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x6c, 0x61, 0x7a, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x61, 0x7a, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x7a,
	0x79, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9c, 0x05, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66, 0x76, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x66,
	0x76, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd7, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x2a, 0x3a, 0x0a, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x56, 0x43, 0x10, 0x02, 0x12, 0x06,
	0x0a, 0x02, 0x53, 0x33, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x46, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x02, 0x2a,
	0x6c, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x5a, 0x59,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x2d, 0x6e, 0x66, 0x76, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x76, 0x69, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_types_proto_rawDescOnce sync.Once
	file_admin_types_proto_rawDescData = file_admin_types_proto_rawDesc
)

func file_admin_types_proto_rawDescGZIP() []byte {
	file_admin_types_proto_rawDescOnce.Do(func() {
		file_admin_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_types_proto_rawDescData)
	})
	return file_admin_types_proto_rawDescData
}

var file_admin_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_admin_types_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_admin_types_proto_goTypes = []interface{}{
	(ImageSourceType)(0),          // 0: admin.kubevim.kubenfv.api.pb.ImageSourceType
	(PullPolicy)(0),               // 1: admin.kubevim.kubenfv.api.pb.PullPolicy
	(DownloadState)(0),            // 2: admin.kubevim.kubenfv.api.pb.DownloadState
	(*ImageMetadata)(nil),         // 3: admin.kubevim.kubenfv.api.pb.ImageMetadata
	(*ImageSource)(nil),           // 4: admin.kubevim.kubenfv.api.pb.ImageSource
	(*HttpSource)(nil),            // 5: admin.kubevim.kubenfv.api.pb.HttpSource
	(*RegistrySource)(nil),        // 6: admin.kubevim.kubenfv.api.pb.RegistrySource
	(*PvcSource)(nil),             // 7: admin.kubevim.kubenfv.api.pb.PvcSource
	(*S3Source)(nil),              // 8: admin.kubevim.kubenfv.api.pb.S3Source
	(*DownloadOptions)(nil),       // 9: admin.kubevim.kubenfv.api.pb.DownloadOptions
	(*Checksum)(nil),              // 10: admin.kubevim.kubenfv.api.pb.Checksum
	(*ImageDownloadStatus)(nil),   // 11: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus
	(*DownloadStatistics)(nil),    // 12: admin.kubevim.kubenfv.api.pb.DownloadStatistics
	nil,                           // 13: admin.kubevim.kubenfv.api.pb.HttpSource.HeadersEntry
	(*apis.Metadata)(nil),         // 14: Metadata
	(*apis.Identifier)(nil),       // 15: Identifier
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_admin_types_proto_depIdxs = []int32{
	14, // 0: admin.kubevim.kubenfv.api.pb.ImageMetadata.metadata:type_name -> Metadata
	0,  // 1: admin.kubevim.kubenfv.api.pb.ImageSource.type:type_name -> admin.kubevim.kubenfv.api.pb.ImageSourceType
	5,  // 2: admin.kubevim.kubenfv.api.pb.ImageSource.http:type_name -> admin.kubevim.kubenfv.api.pb.HttpSource
	6,  // 3: admin.kubevim.kubenfv.api.pb.ImageSource.registry:type_name -> admin.kubevim.kubenfv.api.pb.RegistrySource
	7,  // 4: admin.kubevim.kubenfv.api.pb.ImageSource.pvc:type_name -> admin.kubevim.kubenfv.api.pb.PvcSource
	8,  // 5: admin.kubevim.kubenfv.api.pb.ImageSource.s3:type_name -> admin.kubevim.kubenfv.api.pb.S3Source
	13, // 6: admin.kubevim.kubenfv.api.pb.HttpSource.headers:type_name -> admin.kubevim.kubenfv.api.pb.HttpSource.HeadersEntry
	10, // 7: admin.kubevim.kubenfv.api.pb.HttpSource.checksum:type_name -> admin.kubevim.kubenfv.api.pb.Checksum
	1,  // 8: admin.kubevim.kubenfv.api.pb.RegistrySource.pullPolicy:type_name -> admin.kubevim.kubenfv.api.pb.PullPolicy
	15, // 9: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.imageId:type_name -> Identifier
	2,  // 10: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.state:type_name -> admin.kubevim.kubenfv.api.pb.DownloadState
	16, // 11: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.startedAt:type_name -> google.protobuf.Timestamp
	16, // 12: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.completedAt:type_name -> google.protobuf.Timestamp
	12, // 13: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.statistics:type_name -> admin.kubevim.kubenfv.api.pb.DownloadStatistics
	14, // 14: admin.kubevim.kubenfv.api.pb.ImageDownloadStatus.metadata:type_name -> Metadata
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_admin_types_proto_init() }
func file_admin_types_proto_init() {
	if File_admin_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvcSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDownloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_admin_types_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_admin_types_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_admin_types_proto_goTypes,
		DependencyIndexes: file_admin_types_proto_depIdxs,
		EnumInfos:         file_admin_types_proto_enumTypes,
		MessageInfos:      file_admin_types_proto_msgTypes,
	}.Build()
	File_admin_types_proto = out.File
	file_admin_types_proto_rawDesc = nil
	file_admin_types_proto_goTypes = nil
	file_admin_types_proto_depIdxs = nil
}
