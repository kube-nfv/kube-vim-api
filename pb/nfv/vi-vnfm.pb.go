// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.1
// source: vi-vnfm.proto

package nfv

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of virtualised network resource.
type AllocateNetworkRequest_NetworkResourceType int32

const (
	AllocateNetworkRequest_NETWORK      AllocateNetworkRequest_NetworkResourceType = 0
	AllocateNetworkRequest_SUBNET       AllocateNetworkRequest_NetworkResourceType = 1
	AllocateNetworkRequest_NETWORK_PORT AllocateNetworkRequest_NetworkResourceType = 2
	AllocateNetworkRequest_TRUNK        AllocateNetworkRequest_NetworkResourceType = 3
)

// Enum value maps for AllocateNetworkRequest_NetworkResourceType.
var (
	AllocateNetworkRequest_NetworkResourceType_name = map[int32]string{
		0: "NETWORK",
		1: "SUBNET",
		2: "NETWORK_PORT",
		3: "TRUNK",
	}
	AllocateNetworkRequest_NetworkResourceType_value = map[string]int32{
		"NETWORK":      0,
		"SUBNET":       1,
		"NETWORK_PORT": 2,
		"TRUNK":        3,
	}
)

func (x AllocateNetworkRequest_NetworkResourceType) Enum() *AllocateNetworkRequest_NetworkResourceType {
	p := new(AllocateNetworkRequest_NetworkResourceType)
	*p = x
	return p
}

func (x AllocateNetworkRequest_NetworkResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllocateNetworkRequest_NetworkResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_vi_vnfm_proto_enumTypes[0].Descriptor()
}

func (AllocateNetworkRequest_NetworkResourceType) Type() protoreflect.EnumType {
	return &file_vi_vnfm_proto_enumTypes[0]
}

func (x AllocateNetworkRequest_NetworkResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllocateNetworkRequest_NetworkResourceType.Descriptor instead.
func (AllocateNetworkRequest_NetworkResourceType) EnumDescriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{12, 0}
}

type QueryImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageQueryFilter *Filter `protobuf:"bytes,1,opt,name=imageQueryFilter,proto3" json:"imageQueryFilter,omitempty"`
}

func (x *QueryImagesRequest) Reset() {
	*x = QueryImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImagesRequest) ProtoMessage() {}

func (x *QueryImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImagesRequest.ProtoReflect.Descriptor instead.
func (*QueryImagesRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{0}
}

func (x *QueryImagesRequest) GetImageQueryFilter() *Filter {
	if x != nil {
		return x.ImageQueryFilter
	}
	return nil
}

type QueryImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareImagesInformation []*SoftwareImageInformation `protobuf:"bytes,1,rep,name=softwareImagesInformation,proto3" json:"softwareImagesInformation,omitempty"`
}

func (x *QueryImagesResponse) Reset() {
	*x = QueryImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImagesResponse) ProtoMessage() {}

func (x *QueryImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImagesResponse.ProtoReflect.Descriptor instead.
func (*QueryImagesResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{1}
}

func (x *QueryImagesResponse) GetSoftwareImagesInformation() []*SoftwareImageInformation {
	if x != nil {
		return x.SoftwareImagesInformation
	}
	return nil
}

type QueryImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareImageId *Identifier `protobuf:"bytes,1,opt,name=softwareImageId,proto3" json:"softwareImageId,omitempty"`
}

func (x *QueryImageRequest) Reset() {
	*x = QueryImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImageRequest) ProtoMessage() {}

func (x *QueryImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImageRequest.ProtoReflect.Descriptor instead.
func (*QueryImageRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{2}
}

func (x *QueryImageRequest) GetSoftwareImageId() *Identifier {
	if x != nil {
		return x.SoftwareImageId
	}
	return nil
}

type QueryImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareImageInformation *SoftwareImageInformation `protobuf:"bytes,1,opt,name=softwareImageInformation,proto3,oneof" json:"softwareImageInformation,omitempty"`
}

func (x *QueryImageResponse) Reset() {
	*x = QueryImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImageResponse) ProtoMessage() {}

func (x *QueryImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImageResponse.ProtoReflect.Descriptor instead.
func (*QueryImageResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{3}
}

func (x *QueryImageResponse) GetSoftwareImageInformation() *SoftwareImageInformation {
	if x != nil {
		return x.SoftwareImageInformation
	}
	return nil
}

type AllocateComputeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name provided by the consumer for the virtualised compute resource to be allocated. It can be used for identifying resources from consumer side.
	ComputeName *string `protobuf:"bytes,1,opt,name=computeName,proto3,oneof" json:"computeName,omitempty"`
	// Identifier of the resource reservation applicable to this virtualised resource management operation.
	ReservationId *Identifier `protobuf:"bytes,2,opt,name=reservationId,proto3,oneof" json:"reservationId,omitempty"`
	// List of elements with affinity or anti affinity (see clause 8.4.8.2) information of the virtualised compute resource to be allocated.
	// All the listed constraints shall be fulfilled for a successful operation.
	AffinityOrAntiAffinityConstraints []*AffinityOrAntiAffinityConstraintForCompute `protobuf:"bytes,3,rep,name=affinityOrAntiAffinityConstraints,proto3" json:"affinityOrAntiAffinityConstraints,omitempty"`
	// Identifier of the Compute Flavour, that is providing information about the particular memory, CPU and disk resources for virtualised compute resource to
	// be allocated. The Compute Flavour is created with Create Compute Flavour operation (clause 7.3.4.2). For the content of Compute Flavour see clause 8.4.2.2.
	ComputeFlavourId *Identifier `protobuf:"bytes,4,opt,name=computeFlavourId,proto3" json:"computeFlavourId,omitempty"`
	// Identifier of the virtualisation container software image (e.g. a virtual machine image). Cardinality can be 0 if an "empty" virtualisation container is allocated.
	VcImageId *Identifier `protobuf:"bytes,5,opt,name=vcImageId,proto3,oneof" json:"vcImageId,omitempty"`
	// Data of network interfaces which are specific to a Virtual Compute Resource instance. See clause 8.4.3.7.
	InterfaceData []*VirtualInterfaceData `protobuf:"bytes,6,rep,name=interfaceData,proto3" json:"interfaceData,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData map[string]*anypb.Any `protobuf:"bytes,7,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Unique identifier of the "infrastructure resource group", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.
	// Cardinality can be 0 if the consumer credentials are implicitly associated to a specific resource group.
	ResourceGroupId *Identifier `protobuf:"bytes,8,opt,name=resourceGroupId,proto3,oneof" json:"resourceGroupId,omitempty"`
	// Contains user data to customize the virtualised compute resource at boot-time
	// The user data may consist of static data obtained from an attribute in the VNFD, data provided by the NFVO or the EM to the VNFM in the
	// operation that triggers the invocation of the Allocate Virtualised Compute Resource operation, e.g. the Instantiate VNF operation, and/or
	// one or multiple certificate data obtained from CMF when delegation-mode is used. The user data is transparent to the VIM.
	// It is passed to the allocated virtualised compute resource where it is up to the guest software to avail of
	// it in order to e.g. configure credentials, address information, install certificates, etc.
	UserData *UserData `protobuf:"bytes,10,opt,name=userData,proto3,oneof" json:"userData,omitempty"`
}

func (x *AllocateComputeRequest) Reset() {
	*x = AllocateComputeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateComputeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateComputeRequest) ProtoMessage() {}

func (x *AllocateComputeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateComputeRequest.ProtoReflect.Descriptor instead.
func (*AllocateComputeRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{4}
}

func (x *AllocateComputeRequest) GetComputeName() string {
	if x != nil && x.ComputeName != nil {
		return *x.ComputeName
	}
	return ""
}

func (x *AllocateComputeRequest) GetReservationId() *Identifier {
	if x != nil {
		return x.ReservationId
	}
	return nil
}

func (x *AllocateComputeRequest) GetAffinityOrAntiAffinityConstraints() []*AffinityOrAntiAffinityConstraintForCompute {
	if x != nil {
		return x.AffinityOrAntiAffinityConstraints
	}
	return nil
}

func (x *AllocateComputeRequest) GetComputeFlavourId() *Identifier {
	if x != nil {
		return x.ComputeFlavourId
	}
	return nil
}

func (x *AllocateComputeRequest) GetVcImageId() *Identifier {
	if x != nil {
		return x.VcImageId
	}
	return nil
}

func (x *AllocateComputeRequest) GetInterfaceData() []*VirtualInterfaceData {
	if x != nil {
		return x.InterfaceData
	}
	return nil
}

func (x *AllocateComputeRequest) GetMetaData() map[string]*anypb.Any {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *AllocateComputeRequest) GetResourceGroupId() *Identifier {
	if x != nil {
		return x.ResourceGroupId
	}
	return nil
}

func (x *AllocateComputeRequest) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type AllocateComputeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeData *VirtualCompute `protobuf:"bytes,1,opt,name=computeData,proto3" json:"computeData,omitempty"`
}

func (x *AllocateComputeResponse) Reset() {
	*x = AllocateComputeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateComputeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateComputeResponse) ProtoMessage() {}

func (x *AllocateComputeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateComputeResponse.ProtoReflect.Descriptor instead.
func (*AllocateComputeResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{5}
}

func (x *AllocateComputeResponse) GetComputeData() *VirtualCompute {
	if x != nil {
		return x.ComputeData
	}
	return nil
}

type CreateComputeFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides information about the particular memory, CPU and disk resources for virtualised compute resource to be allocated.
	Flavour *VirtualComputeFlavour `protobuf:"bytes,1,opt,name=flavour,proto3" json:"flavour,omitempty"`
}

func (x *CreateComputeFlavourRequest) Reset() {
	*x = CreateComputeFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComputeFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComputeFlavourRequest) ProtoMessage() {}

func (x *CreateComputeFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComputeFlavourRequest.ProtoReflect.Descriptor instead.
func (*CreateComputeFlavourRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{6}
}

func (x *CreateComputeFlavourRequest) GetFlavour() *VirtualComputeFlavour {
	if x != nil {
		return x.Flavour
	}
	return nil
}

type CreateComputeFlavourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the created Compute Flavour.
	FlavourId *Identifier `protobuf:"bytes,1,opt,name=flavourId,proto3" json:"flavourId,omitempty"`
}

func (x *CreateComputeFlavourResponse) Reset() {
	*x = CreateComputeFlavourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComputeFlavourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComputeFlavourResponse) ProtoMessage() {}

func (x *CreateComputeFlavourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComputeFlavourResponse.ProtoReflect.Descriptor instead.
func (*CreateComputeFlavourResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{7}
}

func (x *CreateComputeFlavourResponse) GetFlavourId() *Identifier {
	if x != nil {
		return x.FlavourId
	}
	return nil
}

type QueryComputeFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query filter based on e.g. name, identifier, meta-data information or status information, expressing the type of information to be retrieved.
	// It can also be used to specify one or more Compute Flavours to be queried by providing their identifiers.
	QueryComputeFlavourFilter *Filter `protobuf:"bytes,1,opt,name=queryComputeFlavourFilter,proto3" json:"queryComputeFlavourFilter,omitempty"`
}

func (x *QueryComputeFlavourRequest) Reset() {
	*x = QueryComputeFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryComputeFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryComputeFlavourRequest) ProtoMessage() {}

func (x *QueryComputeFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryComputeFlavourRequest.ProtoReflect.Descriptor instead.
func (*QueryComputeFlavourRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{8}
}

func (x *QueryComputeFlavourRequest) GetQueryComputeFlavourFilter() *Filter {
	if x != nil {
		return x.QueryComputeFlavourFilter
	}
	return nil
}

type QueryComputeFlavourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Compute Flavours matching the query.
	Flavours []*VirtualComputeFlavour `protobuf:"bytes,1,rep,name=flavours,proto3" json:"flavours,omitempty"`
}

func (x *QueryComputeFlavourResponse) Reset() {
	*x = QueryComputeFlavourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryComputeFlavourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryComputeFlavourResponse) ProtoMessage() {}

func (x *QueryComputeFlavourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryComputeFlavourResponse.ProtoReflect.Descriptor instead.
func (*QueryComputeFlavourResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{9}
}

func (x *QueryComputeFlavourResponse) GetFlavours() []*VirtualComputeFlavour {
	if x != nil {
		return x.Flavours
	}
	return nil
}

type DeleteComputeFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the Compute Flavour to be deleted.
	ComputeFlavourId *Identifier `protobuf:"bytes,1,opt,name=computeFlavourId,proto3" json:"computeFlavourId,omitempty"`
}

func (x *DeleteComputeFlavourRequest) Reset() {
	*x = DeleteComputeFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteComputeFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteComputeFlavourRequest) ProtoMessage() {}

func (x *DeleteComputeFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteComputeFlavourRequest.ProtoReflect.Descriptor instead.
func (*DeleteComputeFlavourRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteComputeFlavourRequest) GetComputeFlavourId() *Identifier {
	if x != nil {
		return x.ComputeFlavourId
	}
	return nil
}

type DeleteComputeFlavourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteComputeFlavourResponse) Reset() {
	*x = DeleteComputeFlavourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteComputeFlavourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteComputeFlavourResponse) ProtoMessage() {}

func (x *DeleteComputeFlavourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteComputeFlavourResponse.ProtoReflect.Descriptor instead.
func (*DeleteComputeFlavourResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{11}
}

type AllocateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name provided by the consumer for the virtualised network resource to be allocated. It can be used for identifying resources from consumer side.
	NetworkResourceName *string `protobuf:"bytes,1,opt,name=networkResourceName,proto3,oneof" json:"networkResourceName,omitempty"`
	// Identifier of the resource reservation applicable to this virtualised resource management operation.
	ReservationId       *Identifier                                 `protobuf:"bytes,2,opt,name=reservationId,proto3,oneof" json:"reservationId,omitempty"`
	NetworkResourceType *AllocateNetworkRequest_NetworkResourceType `protobuf:"varint,3,opt,name=networkResourceType,proto3,enum=kubenvf.kubevim.api.pb.AllocateNetworkRequest_NetworkResourceType,oneof" json:"networkResourceType,omitempty"`
	// Provides information about the particular virtual network resource to be created. Cardinality can be "0" depending on the value of networkResourceType.
	TypeNetworkData *VirtualNetworkData `protobuf:"bytes,4,opt,name=typeNetworkData,proto3,oneof" json:"typeNetworkData,omitempty"`
	// Provides information about the particular sub-network resource to be created. Cardinality can be "0" depending on the value of networkResourceType.
	TypeSubnetData *NetworkSubnetData `protobuf:"bytes,5,opt,name=typeSubnetData,proto3,oneof" json:"typeSubnetData,omitempty"`
	// Provides information about the particular network port to be created. Cardinality can be "0" depending on the value of networkResourceType.
	TypeNetworkPortData *VirtualNetworkPortData `protobuf:"bytes,6,opt,name=typeNetworkPortData,proto3,oneof" json:"typeNetworkPortData,omitempty"`
	// Provides information about the particular trunk to be created. Cardinality can be "0" depending on the value of networkResourceType.
	TypeTrunkData *VirtualTrunkData `protobuf:"bytes,7,opt,name=typeTrunkData,proto3,oneof" json:"typeTrunkData,omitempty"`
	// List of elements with affinity or anti affinity (see clause 8.4.8.2) information of the virtualised network resource to be allocated.
	// All the listed constraints shall be fulfilled for a successful operation.
	AffinityOrAntiAffinityConstraints []*AffinityOrAntiAffinityConstraintForNetwork `protobuf:"bytes,8,rep,name=affinityOrAntiAffinityConstraints,proto3" json:"affinityOrAntiAffinityConstraints,omitempty"`
	// If present, it defines location constraints for the resource(s) to be allocated, e.g. in what particular resource zone.
	LocationConstraintsForNetwork *string `protobuf:"bytes,9,opt,name=locationConstraintsForNetwork,proto3,oneof" json:"locationConstraintsForNetwork,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData map[string]*anypb.Any `protobuf:"bytes,10,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Unique identifier of the "infrastructure resource group", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.
	// Cardinality can be 0 if the consumer credentials are implicitly associated to a specific resource group.
	ResourceGroupId *Identifier `protobuf:"bytes,11,opt,name=resourceGroupId,proto3,oneof" json:"resourceGroupId,omitempty"`
}

func (x *AllocateNetworkRequest) Reset() {
	*x = AllocateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateNetworkRequest) ProtoMessage() {}

func (x *AllocateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateNetworkRequest.ProtoReflect.Descriptor instead.
func (*AllocateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{12}
}

func (x *AllocateNetworkRequest) GetNetworkResourceName() string {
	if x != nil && x.NetworkResourceName != nil {
		return *x.NetworkResourceName
	}
	return ""
}

func (x *AllocateNetworkRequest) GetReservationId() *Identifier {
	if x != nil {
		return x.ReservationId
	}
	return nil
}

func (x *AllocateNetworkRequest) GetNetworkResourceType() AllocateNetworkRequest_NetworkResourceType {
	if x != nil && x.NetworkResourceType != nil {
		return *x.NetworkResourceType
	}
	return AllocateNetworkRequest_NETWORK
}

func (x *AllocateNetworkRequest) GetTypeNetworkData() *VirtualNetworkData {
	if x != nil {
		return x.TypeNetworkData
	}
	return nil
}

func (x *AllocateNetworkRequest) GetTypeSubnetData() *NetworkSubnetData {
	if x != nil {
		return x.TypeSubnetData
	}
	return nil
}

func (x *AllocateNetworkRequest) GetTypeNetworkPortData() *VirtualNetworkPortData {
	if x != nil {
		return x.TypeNetworkPortData
	}
	return nil
}

func (x *AllocateNetworkRequest) GetTypeTrunkData() *VirtualTrunkData {
	if x != nil {
		return x.TypeTrunkData
	}
	return nil
}

func (x *AllocateNetworkRequest) GetAffinityOrAntiAffinityConstraints() []*AffinityOrAntiAffinityConstraintForNetwork {
	if x != nil {
		return x.AffinityOrAntiAffinityConstraints
	}
	return nil
}

func (x *AllocateNetworkRequest) GetLocationConstraintsForNetwork() string {
	if x != nil && x.LocationConstraintsForNetwork != nil {
		return *x.LocationConstraintsForNetwork
	}
	return ""
}

func (x *AllocateNetworkRequest) GetMetaData() map[string]*anypb.Any {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *AllocateNetworkRequest) GetResourceGroupId() *Identifier {
	if x != nil {
		return x.ResourceGroupId
	}
	return nil
}

type AllocateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If network types are created satisfactorily, it contains the data relative to the instantiated virtualised network resource.
	// Cardinality can be "0" if the request did not include creation of such type of resource.
	NetworkData *VirtualNetwork `protobuf:"bytes,1,opt,name=networkData,proto3,oneof" json:"networkData,omitempty"`
	// If subnet types are created satisfactorily, it contains the data relative to the allocated subnet.
	// Cardinality can be "0" if the request did not include creation of such type of resource.
	SubnetData *NetworkSubnet `protobuf:"bytes,2,opt,name=subnetData,proto3,oneof" json:"subnetData,omitempty"`
	// If network port types are created satisfactorily, it contains the data relative to the allocated network port.
	// Cardinality can be "0" if the request did not include creation of such type of resource.
	NetworkPortData *VirtualNetworkPort `protobuf:"bytes,3,opt,name=networkPortData,proto3,oneof" json:"networkPortData,omitempty"`
	// If trunk types are created satisfactorily, it contains the data relative to the allocated trunk.
	// Cardinality can be "0" if the request did not include creation of such type of resource.
	TrunkData *VirtualTrunk `protobuf:"bytes,4,opt,name=trunkData,proto3,oneof" json:"trunkData,omitempty"`
	// If routing resource types are created satisfactorily, it contains the data relative to the allocated routing resource.
	// Cardinality can be "0" if the request did not include creation of such type of resource.
	RoutingResourceData *RoutingResource `protobuf:"bytes,5,opt,name=routingResourceData,proto3,oneof" json:"routingResourceData,omitempty"`
}

func (x *AllocateNetworkResponse) Reset() {
	*x = AllocateNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vi_vnfm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateNetworkResponse) ProtoMessage() {}

func (x *AllocateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vi_vnfm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateNetworkResponse.ProtoReflect.Descriptor instead.
func (*AllocateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_vi_vnfm_proto_rawDescGZIP(), []int{13}
}

func (x *AllocateNetworkResponse) GetNetworkData() *VirtualNetwork {
	if x != nil {
		return x.NetworkData
	}
	return nil
}

func (x *AllocateNetworkResponse) GetSubnetData() *NetworkSubnet {
	if x != nil {
		return x.SubnetData
	}
	return nil
}

func (x *AllocateNetworkResponse) GetNetworkPortData() *VirtualNetworkPort {
	if x != nil {
		return x.NetworkPortData
	}
	return nil
}

func (x *AllocateNetworkResponse) GetTrunkData() *VirtualTrunk {
	if x != nil {
		return x.TrunkData
	}
	return nil
}

func (x *AllocateNetworkResponse) GetRoutingResourceData() *RoutingResource {
	if x != nil {
		return x.RoutingResourceData
	}
	return nil
}

var File_vi_vnfm_proto protoreflect.FileDescriptor

var file_vi_vnfm_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x69, 0x2d, 0x76, 0x6e, 0x66, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x19, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xfe, 0x05, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x21,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x21, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72,
	0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x09, 0x76, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x02, 0x52, 0x09, 0x76, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a,
	0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x22, 0x49, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x19, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x19, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x51, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x09,
	0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x03, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x05, 0x52,
	0x13, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x06, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x21, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x21, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x49, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x1a, 0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x4e,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10,
	0x03, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x48, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x48, 0x03, 0x52, 0x09, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x04, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x32, 0xcf, 0x08, 0x0a, 0x07,
	0x76, 0x69, 0x5f, 0x76, 0x6e, 0x66, 0x6d, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76,
	0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66,
	0x6d, 0x2f, 0x76, 0x35, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x69, 0x76, 0x6e,
	0x66, 0x6d, 0x2f, 0x76, 0x35, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x22, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66, 0x6d, 0x2f, 0x76, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x12, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66, 0x6d, 0x2f, 0x76, 0x35,
	0x2f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x12, 0x32, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66, 0x6d, 0x2f, 0x76, 0x35, 0x2f, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x12, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76,
	0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66, 0x6d, 0x2f, 0x76, 0x35, 0x2f,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x22, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x6e, 0x76, 0x66, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x76, 0x69,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x76, 0x69, 0x76, 0x6e, 0x66,
	0x6d, 0x2f, 0x76, 0x35, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x29, 0x5a,
	0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x2d, 0x6e, 0x66, 0x76, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x76, 0x69, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x62, 0x2f, 0x6e, 0x66, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vi_vnfm_proto_rawDescOnce sync.Once
	file_vi_vnfm_proto_rawDescData = file_vi_vnfm_proto_rawDesc
)

func file_vi_vnfm_proto_rawDescGZIP() []byte {
	file_vi_vnfm_proto_rawDescOnce.Do(func() {
		file_vi_vnfm_proto_rawDescData = protoimpl.X.CompressGZIP(file_vi_vnfm_proto_rawDescData)
	})
	return file_vi_vnfm_proto_rawDescData
}

var file_vi_vnfm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vi_vnfm_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_vi_vnfm_proto_goTypes = []interface{}{
	(AllocateNetworkRequest_NetworkResourceType)(0),    // 0: kubenvf.kubevim.api.pb.AllocateNetworkRequest.NetworkResourceType
	(*QueryImagesRequest)(nil),                         // 1: kubenvf.kubevim.api.pb.QueryImagesRequest
	(*QueryImagesResponse)(nil),                        // 2: kubenvf.kubevim.api.pb.QueryImagesResponse
	(*QueryImageRequest)(nil),                          // 3: kubenvf.kubevim.api.pb.QueryImageRequest
	(*QueryImageResponse)(nil),                         // 4: kubenvf.kubevim.api.pb.QueryImageResponse
	(*AllocateComputeRequest)(nil),                     // 5: kubenvf.kubevim.api.pb.AllocateComputeRequest
	(*AllocateComputeResponse)(nil),                    // 6: kubenvf.kubevim.api.pb.AllocateComputeResponse
	(*CreateComputeFlavourRequest)(nil),                // 7: kubenvf.kubevim.api.pb.CreateComputeFlavourRequest
	(*CreateComputeFlavourResponse)(nil),               // 8: kubenvf.kubevim.api.pb.CreateComputeFlavourResponse
	(*QueryComputeFlavourRequest)(nil),                 // 9: kubenvf.kubevim.api.pb.QueryComputeFlavourRequest
	(*QueryComputeFlavourResponse)(nil),                // 10: kubenvf.kubevim.api.pb.QueryComputeFlavourResponse
	(*DeleteComputeFlavourRequest)(nil),                // 11: kubenvf.kubevim.api.pb.DeleteComputeFlavourRequest
	(*DeleteComputeFlavourResponse)(nil),               // 12: kubenvf.kubevim.api.pb.DeleteComputeFlavourResponse
	(*AllocateNetworkRequest)(nil),                     // 13: kubenvf.kubevim.api.pb.AllocateNetworkRequest
	(*AllocateNetworkResponse)(nil),                    // 14: kubenvf.kubevim.api.pb.AllocateNetworkResponse
	nil,                                                // 15: kubenvf.kubevim.api.pb.AllocateComputeRequest.MetaDataEntry
	nil,                                                // 16: kubenvf.kubevim.api.pb.AllocateNetworkRequest.MetaDataEntry
	(*Filter)(nil),                                     // 17: Filter
	(*SoftwareImageInformation)(nil),                   // 18: SoftwareImageInformation
	(*Identifier)(nil),                                 // 19: Identifier
	(*AffinityOrAntiAffinityConstraintForCompute)(nil), // 20: AffinityOrAntiAffinityConstraintForCompute
	(*VirtualInterfaceData)(nil),                       // 21: VirtualInterfaceData
	(*UserData)(nil),                                   // 22: UserData
	(*VirtualCompute)(nil),                             // 23: VirtualCompute
	(*VirtualComputeFlavour)(nil),                      // 24: VirtualComputeFlavour
	(*VirtualNetworkData)(nil),                         // 25: VirtualNetworkData
	(*NetworkSubnetData)(nil),                          // 26: NetworkSubnetData
	(*VirtualNetworkPortData)(nil),                     // 27: VirtualNetworkPortData
	(*VirtualTrunkData)(nil),                           // 28: VirtualTrunkData
	(*AffinityOrAntiAffinityConstraintForNetwork)(nil), // 29: AffinityOrAntiAffinityConstraintForNetwork
	(*VirtualNetwork)(nil),                             // 30: VirtualNetwork
	(*NetworkSubnet)(nil),                              // 31: NetworkSubnet
	(*VirtualNetworkPort)(nil),                         // 32: VirtualNetworkPort
	(*VirtualTrunk)(nil),                               // 33: VirtualTrunk
	(*RoutingResource)(nil),                            // 34: RoutingResource
	(*anypb.Any)(nil),                                  // 35: google.protobuf.Any
}
var file_vi_vnfm_proto_depIdxs = []int32{
	17, // 0: kubenvf.kubevim.api.pb.QueryImagesRequest.imageQueryFilter:type_name -> Filter
	18, // 1: kubenvf.kubevim.api.pb.QueryImagesResponse.softwareImagesInformation:type_name -> SoftwareImageInformation
	19, // 2: kubenvf.kubevim.api.pb.QueryImageRequest.softwareImageId:type_name -> Identifier
	18, // 3: kubenvf.kubevim.api.pb.QueryImageResponse.softwareImageInformation:type_name -> SoftwareImageInformation
	19, // 4: kubenvf.kubevim.api.pb.AllocateComputeRequest.reservationId:type_name -> Identifier
	20, // 5: kubenvf.kubevim.api.pb.AllocateComputeRequest.affinityOrAntiAffinityConstraints:type_name -> AffinityOrAntiAffinityConstraintForCompute
	19, // 6: kubenvf.kubevim.api.pb.AllocateComputeRequest.computeFlavourId:type_name -> Identifier
	19, // 7: kubenvf.kubevim.api.pb.AllocateComputeRequest.vcImageId:type_name -> Identifier
	21, // 8: kubenvf.kubevim.api.pb.AllocateComputeRequest.interfaceData:type_name -> VirtualInterfaceData
	15, // 9: kubenvf.kubevim.api.pb.AllocateComputeRequest.metaData:type_name -> kubenvf.kubevim.api.pb.AllocateComputeRequest.MetaDataEntry
	19, // 10: kubenvf.kubevim.api.pb.AllocateComputeRequest.resourceGroupId:type_name -> Identifier
	22, // 11: kubenvf.kubevim.api.pb.AllocateComputeRequest.userData:type_name -> UserData
	23, // 12: kubenvf.kubevim.api.pb.AllocateComputeResponse.computeData:type_name -> VirtualCompute
	24, // 13: kubenvf.kubevim.api.pb.CreateComputeFlavourRequest.flavour:type_name -> VirtualComputeFlavour
	19, // 14: kubenvf.kubevim.api.pb.CreateComputeFlavourResponse.flavourId:type_name -> Identifier
	17, // 15: kubenvf.kubevim.api.pb.QueryComputeFlavourRequest.queryComputeFlavourFilter:type_name -> Filter
	24, // 16: kubenvf.kubevim.api.pb.QueryComputeFlavourResponse.flavours:type_name -> VirtualComputeFlavour
	19, // 17: kubenvf.kubevim.api.pb.DeleteComputeFlavourRequest.computeFlavourId:type_name -> Identifier
	19, // 18: kubenvf.kubevim.api.pb.AllocateNetworkRequest.reservationId:type_name -> Identifier
	0,  // 19: kubenvf.kubevim.api.pb.AllocateNetworkRequest.networkResourceType:type_name -> kubenvf.kubevim.api.pb.AllocateNetworkRequest.NetworkResourceType
	25, // 20: kubenvf.kubevim.api.pb.AllocateNetworkRequest.typeNetworkData:type_name -> VirtualNetworkData
	26, // 21: kubenvf.kubevim.api.pb.AllocateNetworkRequest.typeSubnetData:type_name -> NetworkSubnetData
	27, // 22: kubenvf.kubevim.api.pb.AllocateNetworkRequest.typeNetworkPortData:type_name -> VirtualNetworkPortData
	28, // 23: kubenvf.kubevim.api.pb.AllocateNetworkRequest.typeTrunkData:type_name -> VirtualTrunkData
	29, // 24: kubenvf.kubevim.api.pb.AllocateNetworkRequest.affinityOrAntiAffinityConstraints:type_name -> AffinityOrAntiAffinityConstraintForNetwork
	16, // 25: kubenvf.kubevim.api.pb.AllocateNetworkRequest.metaData:type_name -> kubenvf.kubevim.api.pb.AllocateNetworkRequest.MetaDataEntry
	19, // 26: kubenvf.kubevim.api.pb.AllocateNetworkRequest.resourceGroupId:type_name -> Identifier
	30, // 27: kubenvf.kubevim.api.pb.AllocateNetworkResponse.networkData:type_name -> VirtualNetwork
	31, // 28: kubenvf.kubevim.api.pb.AllocateNetworkResponse.subnetData:type_name -> NetworkSubnet
	32, // 29: kubenvf.kubevim.api.pb.AllocateNetworkResponse.networkPortData:type_name -> VirtualNetworkPort
	33, // 30: kubenvf.kubevim.api.pb.AllocateNetworkResponse.trunkData:type_name -> VirtualTrunk
	34, // 31: kubenvf.kubevim.api.pb.AllocateNetworkResponse.routingResourceData:type_name -> RoutingResource
	35, // 32: kubenvf.kubevim.api.pb.AllocateComputeRequest.MetaDataEntry.value:type_name -> google.protobuf.Any
	35, // 33: kubenvf.kubevim.api.pb.AllocateNetworkRequest.MetaDataEntry.value:type_name -> google.protobuf.Any
	1,  // 34: kubenvf.kubevim.api.pb.vi_vnfm.QueryImages:input_type -> kubenvf.kubevim.api.pb.QueryImagesRequest
	3,  // 35: kubenvf.kubevim.api.pb.vi_vnfm.QueryImage:input_type -> kubenvf.kubevim.api.pb.QueryImageRequest
	5,  // 36: kubenvf.kubevim.api.pb.vi_vnfm.AllocateVirtualisedComputeResource:input_type -> kubenvf.kubevim.api.pb.AllocateComputeRequest
	7,  // 37: kubenvf.kubevim.api.pb.vi_vnfm.CreateComputeFlavour:input_type -> kubenvf.kubevim.api.pb.CreateComputeFlavourRequest
	9,  // 38: kubenvf.kubevim.api.pb.vi_vnfm.QueryComputeFlavour:input_type -> kubenvf.kubevim.api.pb.QueryComputeFlavourRequest
	11, // 39: kubenvf.kubevim.api.pb.vi_vnfm.DeleteComputeFlavour:input_type -> kubenvf.kubevim.api.pb.DeleteComputeFlavourRequest
	13, // 40: kubenvf.kubevim.api.pb.vi_vnfm.AllocateVirtualisedNetworkResource:input_type -> kubenvf.kubevim.api.pb.AllocateNetworkRequest
	2,  // 41: kubenvf.kubevim.api.pb.vi_vnfm.QueryImages:output_type -> kubenvf.kubevim.api.pb.QueryImagesResponse
	4,  // 42: kubenvf.kubevim.api.pb.vi_vnfm.QueryImage:output_type -> kubenvf.kubevim.api.pb.QueryImageResponse
	6,  // 43: kubenvf.kubevim.api.pb.vi_vnfm.AllocateVirtualisedComputeResource:output_type -> kubenvf.kubevim.api.pb.AllocateComputeResponse
	8,  // 44: kubenvf.kubevim.api.pb.vi_vnfm.CreateComputeFlavour:output_type -> kubenvf.kubevim.api.pb.CreateComputeFlavourResponse
	10, // 45: kubenvf.kubevim.api.pb.vi_vnfm.QueryComputeFlavour:output_type -> kubenvf.kubevim.api.pb.QueryComputeFlavourResponse
	12, // 46: kubenvf.kubevim.api.pb.vi_vnfm.DeleteComputeFlavour:output_type -> kubenvf.kubevim.api.pb.DeleteComputeFlavourResponse
	14, // 47: kubenvf.kubevim.api.pb.vi_vnfm.AllocateVirtualisedNetworkResource:output_type -> kubenvf.kubevim.api.pb.AllocateNetworkResponse
	41, // [41:48] is the sub-list for method output_type
	34, // [34:41] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_vi_vnfm_proto_init() }
func file_vi_vnfm_proto_init() {
	if File_vi_vnfm_proto != nil {
		return
	}
	file_common_proto_init()
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vi_vnfm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateComputeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateComputeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComputeFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComputeFlavourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryComputeFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryComputeFlavourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteComputeFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteComputeFlavourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vi_vnfm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vi_vnfm_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_vi_vnfm_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_vi_vnfm_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_vi_vnfm_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vi_vnfm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vi_vnfm_proto_goTypes,
		DependencyIndexes: file_vi_vnfm_proto_depIdxs,
		EnumInfos:         file_vi_vnfm_proto_enumTypes,
		MessageInfos:      file_vi_vnfm_proto_msgTypes,
	}.Build()
	File_vi_vnfm_proto = out.File
	file_vi_vnfm_proto_rawDesc = nil
	file_vi_vnfm_proto_goTypes = nil
	file_vi_vnfm_proto_depIdxs = nil
}
