// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.1
// source: types.proto

package nfv

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	resource "k8s.io/apimachinery/pkg/api/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypeOfAffinityOrAntiAffinityConstraint int32

const (
	TypeOfAffinityOrAntiAffinityConstraint_AFFINITY      TypeOfAffinityOrAntiAffinityConstraint = 0
	TypeOfAffinityOrAntiAffinityConstraint_ANTI_AFFINITY TypeOfAffinityOrAntiAffinityConstraint = 1
)

// Enum value maps for TypeOfAffinityOrAntiAffinityConstraint.
var (
	TypeOfAffinityOrAntiAffinityConstraint_name = map[int32]string{
		0: "AFFINITY",
		1: "ANTI_AFFINITY",
	}
	TypeOfAffinityOrAntiAffinityConstraint_value = map[string]int32{
		"AFFINITY":      0,
		"ANTI_AFFINITY": 1,
	}
)

func (x TypeOfAffinityOrAntiAffinityConstraint) Enum() *TypeOfAffinityOrAntiAffinityConstraint {
	p := new(TypeOfAffinityOrAntiAffinityConstraint)
	*p = x
	return p
}

func (x TypeOfAffinityOrAntiAffinityConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeOfAffinityOrAntiAffinityConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (TypeOfAffinityOrAntiAffinityConstraint) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x TypeOfAffinityOrAntiAffinityConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeOfAffinityOrAntiAffinityConstraint.Descriptor instead.
func (TypeOfAffinityOrAntiAffinityConstraint) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

type AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute int32

const (
	AffinityOrAntiAffinityConstraintForCompute_NFVI_NODE AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute = 0 // Default
	AffinityOrAntiAffinityConstraintForCompute_NFVI_POP  AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute = 1
)

// Enum value maps for AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute.
var (
	AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute_name = map[int32]string{
		0: "NFVI_NODE",
		1: "NFVI_POP",
	}
	AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute_value = map[string]int32{
		"NFVI_NODE": 0,
		"NFVI_POP":  1,
	}
)

func (x AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) Enum() *AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute {
	p := new(AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute)
	*p = x
	return p
}

func (x AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute.Descriptor instead.
func (AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1, 0}
}

// Indicates the policy for CPU pinning.
type VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy int32

const (
	// In case of "STATIC" the virtual CPU cores are requested to be allocated to logical CPU cores according to the rules defined in virtualCpuPinningRules.
	VirtualCpuData_VirtualCpuPinningData_STATIC VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy = 0
	// In case of "DYNAMIC" the allocation of virtual CPU cores to logical CPU cores is decided by the VIM (e.g. SMT (Simultaneous Multi-Threading) requirements).
	VirtualCpuData_VirtualCpuPinningData_DYNAMIC VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy = 1
)

// Enum value maps for VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy.
var (
	VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy_name = map[int32]string{
		0: "STATIC",
		1: "DYNAMIC",
	}
	VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy_value = map[string]int32{
		"STATIC":  0,
		"DYNAMIC": 1,
	}
)

func (x VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) Enum() *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy {
	p := new(VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy)
	*p = x
	return p
}

func (x VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy.Descriptor instead.
func (VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 0, 0}
}

// This information element represents Software Image Information
type SoftwareImageInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this software image.
	SoftwareImageId *Identifier `protobuf:"bytes,1,opt,name=softwareImageId,proto3" json:"softwareImageId,omitempty"`
	// Name of this software image.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Provider of this software image.
	Provider *string `protobuf:"bytes,3,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// Version of the software image file.
	Version *string `protobuf:"bytes,4,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Checksum of the software image file.
	Checksum *string `protobuf:"bytes,5,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
	// Container format indicates whether the software image is in a file format that also contains metadata about the actual software.
	ContainerFormat *string `protobuf:"bytes,6,opt,name=containerFormat,proto3,oneof" json:"containerFormat,omitempty"`
	// Disk format of a software image is the format of the underlying disk image.
	DiskFormat *string `protobuf:"bytes,7,opt,name=diskFormat,proto3,oneof" json:"diskFormat,omitempty"`
	// Time this software image was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Time this software image was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// Minimal disk size for this software image.
	MinDisk *resource.Quantity `protobuf:"bytes,10,opt,name=minDisk,proto3,oneof" json:"minDisk,omitempty"`
	// Minimal RAM size for this software image.
	MinRam *resource.Quantity `protobuf:"bytes,11,opt,name=minRam,proto3,oneof" json:"minRam,omitempty"`
	// Size of this software image.
	Size *resource.Quantity `protobuf:"bytes,12,opt,name=size,proto3" json:"size,omitempty"`
	// Status of this software image.
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,14,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *SoftwareImageInformation) Reset() {
	*x = SoftwareImageInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareImageInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareImageInformation) ProtoMessage() {}

func (x *SoftwareImageInformation) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareImageInformation.ProtoReflect.Descriptor instead.
func (*SoftwareImageInformation) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *SoftwareImageInformation) GetSoftwareImageId() *Identifier {
	if x != nil {
		return x.SoftwareImageId
	}
	return nil
}

func (x *SoftwareImageInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoftwareImageInformation) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *SoftwareImageInformation) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *SoftwareImageInformation) GetChecksum() string {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return ""
}

func (x *SoftwareImageInformation) GetContainerFormat() string {
	if x != nil && x.ContainerFormat != nil {
		return *x.ContainerFormat
	}
	return ""
}

func (x *SoftwareImageInformation) GetDiskFormat() string {
	if x != nil && x.DiskFormat != nil {
		return *x.DiskFormat
	}
	return ""
}

func (x *SoftwareImageInformation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SoftwareImageInformation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SoftwareImageInformation) GetMinDisk() *resource.Quantity {
	if x != nil {
		return x.MinDisk
	}
	return nil
}

func (x *SoftwareImageInformation) GetMinRam() *resource.Quantity {
	if x != nil {
		return x.MinRam
	}
	return nil
}

func (x *SoftwareImageInformation) GetSize() *resource.Quantity {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *SoftwareImageInformation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SoftwareImageInformation) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// The parameter used when giving resource affinity or anti-affinity constraints related to virtualised compute resources.
// The parameter is an element with affinity or anti affinity information of the virtualised compute resource to be allocated ETSI GS NFV-IFA 005 and ETSI
// GS NFV-IFA 006
type AffinityOrAntiAffinityConstraintForCompute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Qualifies the scope of the constraint. In case of compute resource, the values are as follows
	Type TypeOfAffinityOrAntiAffinityConstraint `protobuf:"varint,1,opt,name=type,proto3,enum=TypeOfAffinityOrAntiAffinityConstraint" json:"type,omitempty"`
	// Indicates whether this is an affinity or anti- affinity constraint.
	Scope *AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute `protobuf:"varint,2,opt,name=scope,proto3,enum=AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute,oneof" json:"scope,omitempty"`
	// Either affinityOrAntiAffinityResourceList or affinityOrAntiAffinityResourceGroupId but not both shall be present.
	//
	// Types that are assignable to Constraint:
	//
	//	*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList_
	//	*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceGroupId
	Constraint isAffinityOrAntiAffinityConstraintForCompute_Constraint `protobuf_oneof:"constraint"`
}

func (x *AffinityOrAntiAffinityConstraintForCompute) Reset() {
	*x = AffinityOrAntiAffinityConstraintForCompute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffinityOrAntiAffinityConstraintForCompute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffinityOrAntiAffinityConstraintForCompute) ProtoMessage() {}

func (x *AffinityOrAntiAffinityConstraintForCompute) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffinityOrAntiAffinityConstraintForCompute.ProtoReflect.Descriptor instead.
func (*AffinityOrAntiAffinityConstraintForCompute) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *AffinityOrAntiAffinityConstraintForCompute) GetType() TypeOfAffinityOrAntiAffinityConstraint {
	if x != nil {
		return x.Type
	}
	return TypeOfAffinityOrAntiAffinityConstraint_AFFINITY
}

func (x *AffinityOrAntiAffinityConstraintForCompute) GetScope() AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return AffinityOrAntiAffinityConstraintForCompute_NFVI_NODE
}

func (m *AffinityOrAntiAffinityConstraintForCompute) GetConstraint() isAffinityOrAntiAffinityConstraintForCompute_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *AffinityOrAntiAffinityConstraintForCompute) GetAffinityOrAntiAffinityResourceList() *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList {
	if x, ok := x.GetConstraint().(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList_); ok {
		return x.AffinityOrAntiAffinityResourceList
	}
	return nil
}

func (x *AffinityOrAntiAffinityConstraintForCompute) GetAffinityOrAntiAffinityResourceGroupId() *Identifier {
	if x, ok := x.GetConstraint().(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceGroupId); ok {
		return x.AffinityOrAntiAffinityResourceGroupId
	}
	return nil
}

type isAffinityOrAntiAffinityConstraintForCompute_Constraint interface {
	isAffinityOrAntiAffinityConstraintForCompute_Constraint()
}

type AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList_ struct {
	// Consumer-managed list of identifiers of virtualised resources with which the actual resource is requested to be affine or anti- affine.
	AffinityOrAntiAffinityResourceList *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList `protobuf:"bytes,3,opt,name=affinityOrAntiAffinityResourceList,proto3,oneof"`
}

type AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceGroupId struct {
	// Identifier of the producer-managed group of virtualised resources with which the actual resource is
	// requested to be affine or anti-affine. Either affinityOrAntiAffinityResourceList or affinityOrAntiAffinityResourceGroupId but not both shall be present.
	AffinityOrAntiAffinityResourceGroupId *Identifier `protobuf:"bytes,4,opt,name=affinityOrAntiAffinityResourceGroupId,proto3,oneof"`
}

func (*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList_) isAffinityOrAntiAffinityConstraintForCompute_Constraint() {
}

func (*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceGroupId) isAffinityOrAntiAffinityConstraintForCompute_Constraint() {
}

// The parameter used when providing the list of elements with affinity or anti affinity information of the virtualised network resource
type AffinityOrAntiAffinityConstraintForNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AffinityOrAntiAffinityConstraintForNetwork) Reset() {
	*x = AffinityOrAntiAffinityConstraintForNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffinityOrAntiAffinityConstraintForNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffinityOrAntiAffinityConstraintForNetwork) ProtoMessage() {}

func (x *AffinityOrAntiAffinityConstraintForNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffinityOrAntiAffinityConstraintForNetwork.ProtoReflect.Descriptor instead.
func (*AffinityOrAntiAffinityConstraintForNetwork) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

type VirtualInterfaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In the case when the virtual network interface is attached to the network, it references such a network.
	// The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.
	NetworkId *Identifier `protobuf:"bytes,1,opt,name=networkId,proto3,oneof" json:"networkId,omitempty"`
	// The virtual network interface can be configured with specific IP address(es) associated to the network to be attached to.
	// The cardinality can be 0 in the case that a network interface is created without being attached to any specific network,
	// or when an IP address can be automatically configured, e.g. by DHCP.
	IpAddress *IPAddress `protobuf:"bytes,2,opt,name=ipAddress,proto3,oneof" json:"ipAddress,omitempty"`
	// MAC address desired for the virtual network interface.
	// The cardinality can be 0 to allow for network interface without specific MAC address configuration.
	MacAddress *MacAddress `protobuf:"bytes,3,opt,name=macAddress,proto3,oneof" json:"macAddress,omitempty"`
}

func (x *VirtualInterfaceData) Reset() {
	*x = VirtualInterfaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualInterfaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualInterfaceData) ProtoMessage() {}

func (x *VirtualInterfaceData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualInterfaceData.ProtoReflect.Descriptor instead.
func (*VirtualInterfaceData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualInterfaceData) GetNetworkId() *Identifier {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *VirtualInterfaceData) GetIpAddress() *IPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *VirtualInterfaceData) GetMacAddress() *MacAddress {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

type VirtualCompute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualCompute) Reset() {
	*x = VirtualCompute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCompute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCompute) ProtoMessage() {}

func (x *VirtualCompute) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCompute.ProtoReflect.Descriptor instead.
func (*VirtualCompute) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

// Information describing virtual memory.
type VirtualMemoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of virtual Memory (e.g. in MB).
	VirtualMemSize float32 `protobuf:"fixed32,1,opt,name=virtualMemSize,proto3" json:"virtualMemSize,omitempty"`
	// Memory core oversubscription policy in terms of virtual memory to physical memory on the platform.
	// The cardinality can be 0 during the allocation request, if no particular value is requested.
	VirtualMemOversubscriptionPolicy *string `protobuf:"bytes,2,opt,name=virtualMemOversubscriptionPolicy,proto3,oneof" json:"virtualMemOversubscriptionPolicy,omitempty"`
	// Specifies the memory allocation to be cognisant of the relevant process/core allocation. The
	// cardinality can be 0 during the allocation request, if no particular value is requested
	NumaEnabled *bool `protobuf:"varint,3,opt,name=numaEnabled,proto3,oneof" json:"numaEnabled,omitempty"`
}

func (x *VirtualMemoryData) Reset() {
	*x = VirtualMemoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMemoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMemoryData) ProtoMessage() {}

func (x *VirtualMemoryData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMemoryData.ProtoReflect.Descriptor instead.
func (*VirtualMemoryData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualMemoryData) GetVirtualMemSize() float32 {
	if x != nil {
		return x.VirtualMemSize
	}
	return 0
}

func (x *VirtualMemoryData) GetVirtualMemOversubscriptionPolicy() string {
	if x != nil && x.VirtualMemOversubscriptionPolicy != nil {
		return *x.VirtualMemOversubscriptionPolicy
	}
	return ""
}

func (x *VirtualMemoryData) GetNumaEnabled() bool {
	if x != nil && x.NumaEnabled != nil {
		return *x.NumaEnabled
	}
	return false
}

// Information describing a virtual CPU.
type VirtualCpuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU architecture type. Examples are x86, ARM. The cardinality can be 0 during the allocation request, if no particular CPU architecture type is requested.
	CpuArchitecture *string `protobuf:"bytes,1,opt,name=cpuArchitecture,proto3,oneof" json:"cpuArchitecture,omitempty"`
	// Number of virtual CPUs.
	NumVirtualCpu uint32 `protobuf:"varint,2,opt,name=numVirtualCpu,proto3" json:"numVirtualCpu,omitempty"`
	// Minimum CPU clock rate
	// (e.g. in MHz) available for the virtualised CPU resources. The cardinality can be 0 during the allocation request, if no particular value is requested.
	CpuClock *float32 `protobuf:"fixed32,3,opt,name=cpuClock,proto3,oneof" json:"cpuClock,omitempty"`
	// The CPU core oversubscription policy, e.g. the relation of virtual CPU cores to physical CPU cores/threads.
	// The cardinality can be 0 during the allocation request, if no particular value is requested.
	// E.g. virtual CPU core : physical CPU core= 4:1
	VirtualCpuOversubscriptionPolicy *string `protobuf:"bytes,4,opt,name=virtualCpuOversubscriptionPolicy,proto3,oneof" json:"virtualCpuOversubscriptionPolicy,omitempty"`
	// Virtual CPU pinning configuration for the virtualised compute resource.
	VirtualCpuPinning *VirtualCpuData_VirtualCpuPinningData `protobuf:"bytes,5,opt,name=virtualCpuPinning,proto3,oneof" json:"virtualCpuPinning,omitempty"`
	// Virtual CPU power (state) requirements for the virtualised compute resource.
	PowerStateReqs *string `protobuf:"bytes,6,opt,name=powerStateReqs,proto3,oneof" json:"powerStateReqs,omitempty"`
}

func (x *VirtualCpuData) Reset() {
	*x = VirtualCpuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCpuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCpuData) ProtoMessage() {}

func (x *VirtualCpuData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCpuData.ProtoReflect.Descriptor instead.
func (*VirtualCpuData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualCpuData) GetCpuArchitecture() string {
	if x != nil && x.CpuArchitecture != nil {
		return *x.CpuArchitecture
	}
	return ""
}

func (x *VirtualCpuData) GetNumVirtualCpu() uint32 {
	if x != nil {
		return x.NumVirtualCpu
	}
	return 0
}

func (x *VirtualCpuData) GetCpuClock() float32 {
	if x != nil && x.CpuClock != nil {
		return *x.CpuClock
	}
	return 0
}

func (x *VirtualCpuData) GetVirtualCpuOversubscriptionPolicy() string {
	if x != nil && x.VirtualCpuOversubscriptionPolicy != nil {
		return *x.VirtualCpuOversubscriptionPolicy
	}
	return ""
}

func (x *VirtualCpuData) GetVirtualCpuPinning() *VirtualCpuData_VirtualCpuPinningData {
	if x != nil {
		return x.VirtualCpuPinning
	}
	return nil
}

func (x *VirtualCpuData) GetPowerStateReqs() string {
	if x != nil && x.PowerStateReqs != nil {
		return *x.PowerStateReqs
	}
	return ""
}

// A virtual network interface is a communication endpoint under a compute resource.
type VirtualNetworkInterfaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In the case when the virtual network interface is attached to the network, it identifies such a network.
	// The cardinality can be 0 in the case that a network interface is created without being attached to any specific network.
	NetworkId *Identifier `protobuf:"bytes,1,opt,name=networkId,proto3,oneof" json:"networkId,omitempty"`
	// If the virtual network interface is attached to a specific network port, it identifies such a network port.
	// The cardinality can be 0 in the case that a network interface is created without any specific network port attachment.
	NetworkPortId *Identifier `protobuf:"bytes,2,opt,name=networkPortId,proto3,oneof" json:"networkPortId,omitempty"`
	// Note: There is only part of flavour as specified in ETSI GS NFV-IFA 005 and ETSI GS NFV-IFA 006 are included in this version of the present document,
	// the following are attributes not included: typeVirtualNic, typeConfiguration
	// typeVirtualNic = 3;
	// typeConfiguration = 4;
	// Bandwidth of the virtual network interface (in Mbps).
	Bandwidth *float32 `protobuf:"fixed32,5,opt,name=bandwidth,proto3,oneof" json:"bandwidth,omitempty"`
	// It specifies if the virtual network interface requires certain acceleration capabilities (e.g. RDMA, packet dispatch, TCP Chimney).
	// The cardinality can be 0, if no particular acceleration capability is requested.
	AccelerationCapabilityForVirtualNetworkInterface []string `protobuf:"bytes,6,rep,name=accelerationCapabilityForVirtualNetworkInterface,proto3" json:"accelerationCapabilityForVirtualNetworkInterface,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,7,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VirtualNetworkInterfaceData) Reset() {
	*x = VirtualNetworkInterfaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetworkInterfaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetworkInterfaceData) ProtoMessage() {}

func (x *VirtualNetworkInterfaceData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetworkInterfaceData.ProtoReflect.Descriptor instead.
func (*VirtualNetworkInterfaceData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *VirtualNetworkInterfaceData) GetNetworkId() *Identifier {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *VirtualNetworkInterfaceData) GetNetworkPortId() *Identifier {
	if x != nil {
		return x.NetworkPortId
	}
	return nil
}

func (x *VirtualNetworkInterfaceData) GetBandwidth() float32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *VirtualNetworkInterfaceData) GetAccelerationCapabilityForVirtualNetworkInterface() []string {
	if x != nil {
		return x.AccelerationCapabilityForVirtualNetworkInterface
	}
	return nil
}

func (x *VirtualNetworkInterfaceData) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// This clause describes the attributes for the VirtualStorageData information element.
type VirtualStorageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of virtualised storage resource (e.g. volume, object).
	TypeOfStorage string `protobuf:"bytes,1,opt,name=typeOfStorage,proto3" json:"typeOfStorage,omitempty"`
	// Size of virtualised storage resource (e.g. size of volume, in GB).
	SizeOfStorage float32 `protobuf:"fixed32,2,opt,name=sizeOfStorage,proto3" json:"sizeOfStorage,omitempty"`
	// Indicates if the storage supports RDMA.
	RdmaEnabled *bool `protobuf:"varint,3,opt,name=rdmaEnabled,proto3,oneof" json:"rdmaEnabled,omitempty"`
}

func (x *VirtualStorageData) Reset() {
	*x = VirtualStorageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualStorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualStorageData) ProtoMessage() {}

func (x *VirtualStorageData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualStorageData.ProtoReflect.Descriptor instead.
func (*VirtualStorageData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *VirtualStorageData) GetTypeOfStorage() string {
	if x != nil {
		return x.TypeOfStorage
	}
	return ""
}

func (x *VirtualStorageData) GetSizeOfStorage() float32 {
	if x != nil {
		return x.SizeOfStorage
	}
	return 0
}

func (x *VirtualStorageData) GetRdmaEnabled() bool {
	if x != nil && x.RdmaEnabled != nil {
		return *x.RdmaEnabled
	}
	return false
}

// The VirtualComputeFlavour information element encapsulates information for compute flavours. A compute flavour includes information
// about number of virtual CPUs, size of virtual memory, size of virtual storage, and virtual network interfaces.
type VirtualComputeFlavour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier given to the compute flavour. When the VirtualComputeFlavour is used as input in operations to request the creation
	// of a compute flavour, the cardinality can be "0" if VIM assigns the identifier in order to avoid potential identifier assignment conflicts.
	// The flavourId shall be present otherwise.
	FlavourId *Identifier `protobuf:"bytes,1,opt,name=flavourId,proto3,oneof" json:"flavourId,omitempty"`
	// Scope of flavour accessibility. It indicates if the compute flavour is accessible and shared across clients.
	// Default value is True (if not specified), which means public. False means private.
	IsPublic *bool `protobuf:"varint,2,opt,name=isPublic,proto3,oneof" json:"isPublic,omitempty"`
	// Virtual memory of the virtualised compute.
	VirtualMemory *VirtualMemoryData `protobuf:"bytes,4,opt,name=virtualMemory,proto3" json:"virtualMemory,omitempty"`
	// Virtual CPU(s) of the virtualised compute.
	VirtualCpu *VirtualCpuData `protobuf:"bytes,5,opt,name=virtualCpu,proto3" json:"virtualCpu,omitempty"`
	// Contains information about the size of virtualised storage resource (e.g. size of volume, in GB), the type of storage (e.g. volume, object), and support for RDMA.
	StorageAttributes []*VirtualStorageData `protobuf:"bytes,6,rep,name=storageAttributes,proto3" json:"storageAttributes,omitempty"`
	// Virtual network interfaces of the virtualised compute
	VirtualNetworkInterface []*VirtualNetworkInterfaceData `protobuf:"bytes,7,rep,name=virtualNetworkInterface,proto3" json:"virtualNetworkInterface,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,8,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VirtualComputeFlavour) Reset() {
	*x = VirtualComputeFlavour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualComputeFlavour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualComputeFlavour) ProtoMessage() {}

func (x *VirtualComputeFlavour) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualComputeFlavour.ProtoReflect.Descriptor instead.
func (*VirtualComputeFlavour) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *VirtualComputeFlavour) GetFlavourId() *Identifier {
	if x != nil {
		return x.FlavourId
	}
	return nil
}

func (x *VirtualComputeFlavour) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *VirtualComputeFlavour) GetVirtualMemory() *VirtualMemoryData {
	if x != nil {
		return x.VirtualMemory
	}
	return nil
}

func (x *VirtualComputeFlavour) GetVirtualCpu() *VirtualCpuData {
	if x != nil {
		return x.VirtualCpu
	}
	return nil
}

func (x *VirtualComputeFlavour) GetStorageAttributes() []*VirtualStorageData {
	if x != nil {
		return x.StorageAttributes
	}
	return nil
}

func (x *VirtualComputeFlavour) GetVirtualNetworkInterface() []*VirtualNetworkInterfaceData {
	if x != nil {
		return x.VirtualNetworkInterface
	}
	return nil
}

func (x *VirtualComputeFlavour) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// This clause describes the attributes for the NetworkQoS information element. This type gives QoS options to be supported on the
// virtualised network, e.g. latency, jitter, etc.
type NetworkQoS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name given to the QoS parameter.
	QosName string `protobuf:"bytes,1,opt,name=qosName,proto3" json:"qosName,omitempty"`
	// Value of the QoS parameter.
	QosValue string `protobuf:"bytes,2,opt,name=qosValue,proto3" json:"qosValue,omitempty"`
}

func (x *NetworkQoS) Reset() {
	*x = NetworkQoS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkQoS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkQoS) ProtoMessage() {}

func (x *NetworkQoS) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkQoS.ProtoReflect.Descriptor instead.
func (*NetworkQoS) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkQoS) GetQosName() string {
	if x != nil {
		return x.QosName
	}
	return ""
}

func (x *NetworkQoS) GetQosValue() string {
	if x != nil {
		return x.QosValue
	}
	return ""
}

type VirtualNetworkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum network bandwidth (in Mbps).
	Bandwidth float32 `protobuf:"fixed32,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Type of network that maps to the virtualised network. This list is extensible. Examples are:
	//   - "local";
	//   - "vlan";
	//   - "vxlan";
	//   - "gre";
	//   - "l3-vpn";
	//   - etc.
	//     Cardinality can be "0" to cover the case where this attribute is not required to create the virtualised network.
	NetworkType *string `protobuf:"bytes,2,opt,name=networkType,proto3,oneof" json:"networkType,omitempty"`
	// The segmentation identifier of the network that maps to the virtualised network, for which, the segmentation model is defined
	// by the networkType attribute. For instance, for a "vlan" networkType, it corresponds to the vlan identifier;
	// and for a "gre" networkType, it corresponds to a gre key.
	// Cardinality can be "0" to cover the case where networkType is flat network without any specific segmentation.
	SegmentationId *string `protobuf:"bytes,3,opt,name=segmentationId,proto3,oneof" json:"segmentationId,omitempty"`
	// Provides information about Quality of Service attributes that the network shall support.
	// Cardinality can be "0" for networks without any specified QoS requirements.
	NetworkQoS []*NetworkQoS `protobuf:"bytes,4,rep,name=networkQoS,proto3" json:"networkQoS,omitempty"`
	// Specifies whether the virtualised network is shared among consumers.
	IsShared *bool `protobuf:"varint,5,opt,name=isShared,proto3,oneof" json:"isShared,omitempty"`
	// Attribute list allows setting up a network providing defined layer 3 connectivity.
	Layer3Attributes []*NetworkSubnetData `protobuf:"bytes,6,rep,name=layer3Attributes,proto3" json:"layer3Attributes,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,7,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VirtualNetworkData) Reset() {
	*x = VirtualNetworkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetworkData) ProtoMessage() {}

func (x *VirtualNetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetworkData.ProtoReflect.Descriptor instead.
func (*VirtualNetworkData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *VirtualNetworkData) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *VirtualNetworkData) GetNetworkType() string {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return ""
}

func (x *VirtualNetworkData) GetSegmentationId() string {
	if x != nil && x.SegmentationId != nil {
		return *x.SegmentationId
	}
	return ""
}

func (x *VirtualNetworkData) GetNetworkQoS() []*NetworkQoS {
	if x != nil {
		return x.NetworkQoS
	}
	return nil
}

func (x *VirtualNetworkData) GetIsShared() bool {
	if x != nil && x.IsShared != nil {
		return *x.IsShared
	}
	return false
}

func (x *VirtualNetworkData) GetLayer3Attributes() []*NetworkSubnetData {
	if x != nil {
		return x.Layer3Attributes
	}
	return nil
}

func (x *VirtualNetworkData) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// The NetworkSubnetData information element encapsulates information to allocate or update virtualised sub-networks.
type NetworkSubnetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the virtualised network that the virtualised sub-network is attached to.
	// The cardinality can be 0 to cover the case where this type is used to describe the L3 attributes of a network rather
	// than a subnetwork or when NetworkSubnetData is part of Update Virtualised Network Resource.
	// Note: In these cases, changing the parameter is such a fundamental change that a new virtualised network resource should be created instead of updating an existing network resource.
	NetworkId *Identifier `protobuf:"bytes,1,opt,name=networkId,proto3,oneof" json:"networkId,omitempty"`
	// IP version of the network/subnetwork.
	// Cardinality can be 0 when NetworkSubnetData is part of Update Virtualised Network Resource
	// Note: In these cases, changing the parameter is such a fundamental change that a new virtualised network resource should be created instead of updating an existing network resource.
	IpVersion *IPVersion `protobuf:"varint,2,opt,name=ipVersion,proto3,enum=IPVersion,oneof" json:"ipVersion,omitempty"`
	// Specifies the IP address of the network/subnetwork gateway when the gateway is selected by the requestor.
	GatewayIp *IPAddress `protobuf:"bytes,3,opt,name=gatewayIp,proto3,oneof" json:"gatewayIp,omitempty"`
	// CIDR of the network/subnetwork, i.e. network address and subnet mask.
	// Cardinality can be 0 when NetworkSubnetData is part of Update Virtualised Network Resource
	// In these cases, changing the parameter is such a fundamental change that a new virtualised network resource should be created instead of updating an existing network resource.
	Cidr *IPSubnetCIDR `protobuf:"bytes,4,opt,name=cidr,proto3,oneof" json:"cidr,omitempty"`
	// True when DHCP is to be enabled for this network/subnetwork, or false otherwise.
	IsDhcpEnabled *bool `protobuf:"varint,5,opt,name=isDhcpEnabled,proto3,oneof" json:"isDhcpEnabled,omitempty"`
	// Address pools for the network/subnetwork. The cardinality can be 0 when VIM is allowed to allocate all addresses in the
	// CIDR except for the address of the network/subnetwork gateway.
	AddressPool *IPAddressPool `protobuf:"bytes,6,opt,name=addressPool,proto3,oneof" json:"addressPool,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,7,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *NetworkSubnetData) Reset() {
	*x = NetworkSubnetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSubnetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSubnetData) ProtoMessage() {}

func (x *NetworkSubnetData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSubnetData.ProtoReflect.Descriptor instead.
func (*NetworkSubnetData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkSubnetData) GetNetworkId() *Identifier {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *NetworkSubnetData) GetIpVersion() IPVersion {
	if x != nil && x.IpVersion != nil {
		return *x.IpVersion
	}
	return IPVersion_IPV4
}

func (x *NetworkSubnetData) GetGatewayIp() *IPAddress {
	if x != nil {
		return x.GatewayIp
	}
	return nil
}

func (x *NetworkSubnetData) GetCidr() *IPSubnetCIDR {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *NetworkSubnetData) GetIsDhcpEnabled() bool {
	if x != nil && x.IsDhcpEnabled != nil {
		return *x.IsDhcpEnabled
	}
	return false
}

func (x *NetworkSubnetData) GetAddressPool() *IPAddressPool {
	if x != nil {
		return x.AddressPool
	}
	return nil
}

func (x *NetworkSubnetData) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type VirtualNetworkPortData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualNetworkPortData) Reset() {
	*x = VirtualNetworkPortData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetworkPortData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetworkPortData) ProtoMessage() {}

func (x *VirtualNetworkPortData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetworkPortData.ProtoReflect.Descriptor instead.
func (*VirtualNetworkPortData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

type VirtualTrunkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualTrunkData) Reset() {
	*x = VirtualTrunkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualTrunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualTrunkData) ProtoMessage() {}

func (x *VirtualTrunkData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualTrunkData.ProtoReflect.Descriptor instead.
func (*VirtualTrunkData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

// The information elements in this group encapsulates information of an instantiated virtualised network resource.
// In the NFVI, a virtual network transports information among the network interfaces of VM instances and physical network interfaces, providing the necessary connectiv
type VirtualNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the virtualised network resource.
	NetworkResourceId *Identifier `protobuf:"bytes,1,opt,name=networkResourceId,proto3" json:"networkResourceId,omitempty"`
	// Name of the virtualised network resource.
	NetworkResourceName *string `protobuf:"bytes,2,opt,name=networkResourceName,proto3,oneof" json:"networkResourceName,omitempty"`
	// References the network subnet.
	// Only present if the network provides layer 3 connectivity.
	SubnetId []*Identifier `protobuf:"bytes,3,rep,name=subnetId,proto3" json:"subnetId,omitempty"`
	// Type of network that maps to the virtualised network. This list is extensible. Examples are:
	//   - "local";
	//   - "vlan";
	//   - "vxlan";
	//   - "gre";
	//   - "l3-vpn";
	//   - etc.
	NetworkType string `protobuf:"bytes,6,opt,name=networkType,proto3" json:"networkType,omitempty"`
	// Operational state of the virtualised network.
	OperationalState OperationalState `protobuf:"varint,12,opt,name=operationalState,proto3,enum=OperationalState" json:"operationalState,omitempty"`
	// List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
	MetaData *Metadata `protobuf:"bytes,13,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VirtualNetwork) Reset() {
	*x = VirtualNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetwork) ProtoMessage() {}

func (x *VirtualNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetwork.ProtoReflect.Descriptor instead.
func (*VirtualNetwork) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *VirtualNetwork) GetNetworkResourceId() *Identifier {
	if x != nil {
		return x.NetworkResourceId
	}
	return nil
}

func (x *VirtualNetwork) GetNetworkResourceName() string {
	if x != nil && x.NetworkResourceName != nil {
		return *x.NetworkResourceName
	}
	return ""
}

func (x *VirtualNetwork) GetSubnetId() []*Identifier {
	if x != nil {
		return x.SubnetId
	}
	return nil
}

func (x *VirtualNetwork) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *VirtualNetwork) GetOperationalState() OperationalState {
	if x != nil {
		return x.OperationalState
	}
	return OperationalState_ENABLED
}

func (x *VirtualNetwork) GetMetaData() *Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type VirtualNetworkPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualNetworkPort) Reset() {
	*x = VirtualNetworkPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetworkPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetworkPort) ProtoMessage() {}

func (x *VirtualNetworkPort) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetworkPort.ProtoReflect.Descriptor instead.
func (*VirtualNetworkPort) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

// The AffinityOrAntiAffinityResourceList information element defines an explicit list of resources to
// express affinity or anti-affinity between these resources and a current resource. The scope of the affinity or anti-affinity can also be defined.
type AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of identifiers of virtualised resources.
	ResourceId []*Identifier `protobuf:"bytes,1,rep,name=resourceId,proto3" json:"resourceId,omitempty"`
}

func (x *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) Reset() {
	*x = AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) ProtoMessage() {
}

func (x *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList.ProtoReflect.Descriptor instead.
func (*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList) GetResourceId() []*Identifier {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

// Information describing CPU pinning policy and rules for virtual CPU to physical CPU mapping of the virtualised compute resource.
type VirtualCpuData_VirtualCpuPinningData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualCpuPinningPolicy VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy `protobuf:"varint,1,opt,name=virtualCpuPinningPolicy,proto3,enum=VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy" json:"virtualCpuPinningPolicy,omitempty"`
	// A list of rules that should be considered during the allocation of the virtual CPU-s to logical CPU-s in case of "static" virtualCpuPinningPolicy.
	VirtualCpuPinningRules []*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule `protobuf:"bytes,2,rep,name=virtualCpuPinningRules,proto3" json:"virtualCpuPinningRules,omitempty"`
}

func (x *VirtualCpuData_VirtualCpuPinningData) Reset() {
	*x = VirtualCpuData_VirtualCpuPinningData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCpuData_VirtualCpuPinningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCpuData_VirtualCpuPinningData) ProtoMessage() {}

func (x *VirtualCpuData_VirtualCpuPinningData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCpuData_VirtualCpuPinningData.ProtoReflect.Descriptor instead.
func (*VirtualCpuData_VirtualCpuPinningData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 0}
}

func (x *VirtualCpuData_VirtualCpuPinningData) GetVirtualCpuPinningPolicy() VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy {
	if x != nil {
		return x.VirtualCpuPinningPolicy
	}
	return VirtualCpuData_VirtualCpuPinningData_STATIC
}

func (x *VirtualCpuData_VirtualCpuPinningData) GetVirtualCpuPinningRules() []*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule {
	if x != nil {
		return x.VirtualCpuPinningRules
	}
	return nil
}

type VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of core in the virtual CPU.
	Cores float32 `protobuf:"fixed32,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// The number of socket in the virtual CPU.
	Sockets float32 `protobuf:"fixed32,2,opt,name=sockets,proto3" json:"sockets,omitempty"`
	// The number of thread in the virtual CPU.
	Threads float32 `protobuf:"fixed32,3,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) Reset() {
	*x = VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) ProtoMessage() {}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule.ProtoReflect.Descriptor instead.
func (*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) GetCores() float32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) GetSockets() float32 {
	if x != nil {
		return x.Sockets
	}
	return 0
}

func (x *VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule) GetThreads() float32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8d, 0x06, 0x0a, 0x18, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x06, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x52,
	0x61, 0x6d, 0x22, 0xa8, 0x05, 0x0a, 0x2a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x78,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x4f, 0x66, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x22, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x22, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x25, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x25, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x1a, 0x51, 0x0a, 0x22, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e,
	0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x31, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4f, 0x66, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x46, 0x56, 0x49,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x46, 0x56, 0x49, 0x5f,
	0x50, 0x4f, 0x50, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x2c, 0x0a,
	0x2a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xd2, 0x01, 0x0a, 0x14,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x0a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x10, 0x0a, 0x0e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x20,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x75,
	0x6d, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xec, 0x06, 0x0a, 0x0e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0f,
	0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70,
	0x75, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75,
	0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x20,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70,
	0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x03, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x9c, 0x03, 0x0a, 0x15, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70,
	0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75,
	0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x73, 0x0a,
	0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0x61, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75,
	0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x70, 0x75, 0x50, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x70,
	0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x70, 0x75, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x50, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x1b, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x30, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x30, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x66,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x64, 0x6d, 0x61, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x64, 0x6d, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb0,
	0x03, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0d, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x70,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x70, 0x75, 0x12, 0x41, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x22, 0x42, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x6f, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x6f, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x6f, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x6f, 0x53, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x6f, 0x53, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x6f, 0x53, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x10,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x33, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x33, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x22, 0xa7, 0x03, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x49,
	0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x50, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x43, 0x49, 0x44, 0x52, 0x48, 0x03, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x48,
	0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x69, 0x73, 0x44, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x18, 0x0a,
	0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x12, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x02, 0x0a, 0x0e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x39,
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x13, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x2a,
	0x49, 0x0a, 0x26, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x46, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x54, 0x49, 0x5f,
	0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x6e, 0x66,
	0x76, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x76, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x2f, 0x6e, 0x66, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_types_proto_goTypes = []interface{}{
	(TypeOfAffinityOrAntiAffinityConstraint)(0),                                                       // 0: TypeOfAffinityOrAntiAffinityConstraint
	(AffinityOrAntiAffinityConstraintForCompute_ScopeOfAffinityOrAntiAffinityConstraintForCompute)(0), // 1: AffinityOrAntiAffinityConstraintForCompute.ScopeOfAffinityOrAntiAffinityConstraintForCompute
	(VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningPolicy)(0),                                 // 2: VirtualCpuData.VirtualCpuPinningData.VirtualCpuPinningPolicy
	(*SoftwareImageInformation)(nil),                                                                  // 3: SoftwareImageInformation
	(*AffinityOrAntiAffinityConstraintForCompute)(nil),                                                // 4: AffinityOrAntiAffinityConstraintForCompute
	(*AffinityOrAntiAffinityConstraintForNetwork)(nil),                                                // 5: AffinityOrAntiAffinityConstraintForNetwork
	(*VirtualInterfaceData)(nil),                                                                      // 6: VirtualInterfaceData
	(*UserData)(nil),                                                                                  // 7: UserData
	(*VirtualCompute)(nil),                                                                            // 8: VirtualCompute
	(*VirtualMemoryData)(nil),                                                                         // 9: VirtualMemoryData
	(*VirtualCpuData)(nil),                                                                            // 10: VirtualCpuData
	(*VirtualNetworkInterfaceData)(nil),                                                               // 11: VirtualNetworkInterfaceData
	(*VirtualStorageData)(nil),                                                                        // 12: VirtualStorageData
	(*VirtualComputeFlavour)(nil),                                                                     // 13: VirtualComputeFlavour
	(*NetworkQoS)(nil),                                                                                // 14: NetworkQoS
	(*VirtualNetworkData)(nil),                                                                        // 15: VirtualNetworkData
	(*NetworkSubnetData)(nil),                                                                         // 16: NetworkSubnetData
	(*VirtualNetworkPortData)(nil),                                                                    // 17: VirtualNetworkPortData
	(*VirtualTrunkData)(nil),                                                                          // 18: VirtualTrunkData
	(*VirtualNetwork)(nil),                                                                            // 19: VirtualNetwork
	(*VirtualNetworkPort)(nil),                                                                        // 20: VirtualNetworkPort
	(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList)(nil), // 21: AffinityOrAntiAffinityConstraintForCompute.AffinityOrAntiAffinityResourceList
	(*VirtualCpuData_VirtualCpuPinningData)(nil),                                          // 22: VirtualCpuData.VirtualCpuPinningData
	(*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule)(nil),                    // 23: VirtualCpuData.VirtualCpuPinningData.VirtualCpuPinningRule
	(*Identifier)(nil),            // 24: Identifier
	(*timestamppb.Timestamp)(nil), // 25: google.protobuf.Timestamp
	(*resource.Quantity)(nil),     // 26: k8s.io.apimachinery.pkg.api.resource.Quantity
	(*Metadata)(nil),              // 27: Metadata
	(*IPAddress)(nil),             // 28: IPAddress
	(*MacAddress)(nil),            // 29: MacAddress
	(IPVersion)(0),                // 30: IPVersion
	(*IPSubnetCIDR)(nil),          // 31: IPSubnetCIDR
	(*IPAddressPool)(nil),         // 32: IPAddressPool
	(OperationalState)(0),         // 33: OperationalState
}
var file_types_proto_depIdxs = []int32{
	24, // 0: SoftwareImageInformation.softwareImageId:type_name -> Identifier
	25, // 1: SoftwareImageInformation.createdAt:type_name -> google.protobuf.Timestamp
	25, // 2: SoftwareImageInformation.updatedAt:type_name -> google.protobuf.Timestamp
	26, // 3: SoftwareImageInformation.minDisk:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	26, // 4: SoftwareImageInformation.minRam:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	26, // 5: SoftwareImageInformation.size:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	27, // 6: SoftwareImageInformation.metaData:type_name -> Metadata
	0,  // 7: AffinityOrAntiAffinityConstraintForCompute.type:type_name -> TypeOfAffinityOrAntiAffinityConstraint
	1,  // 8: AffinityOrAntiAffinityConstraintForCompute.scope:type_name -> AffinityOrAntiAffinityConstraintForCompute.ScopeOfAffinityOrAntiAffinityConstraintForCompute
	21, // 9: AffinityOrAntiAffinityConstraintForCompute.affinityOrAntiAffinityResourceList:type_name -> AffinityOrAntiAffinityConstraintForCompute.AffinityOrAntiAffinityResourceList
	24, // 10: AffinityOrAntiAffinityConstraintForCompute.affinityOrAntiAffinityResourceGroupId:type_name -> Identifier
	24, // 11: VirtualInterfaceData.networkId:type_name -> Identifier
	28, // 12: VirtualInterfaceData.ipAddress:type_name -> IPAddress
	29, // 13: VirtualInterfaceData.macAddress:type_name -> MacAddress
	22, // 14: VirtualCpuData.virtualCpuPinning:type_name -> VirtualCpuData.VirtualCpuPinningData
	24, // 15: VirtualNetworkInterfaceData.networkId:type_name -> Identifier
	24, // 16: VirtualNetworkInterfaceData.networkPortId:type_name -> Identifier
	27, // 17: VirtualNetworkInterfaceData.metaData:type_name -> Metadata
	24, // 18: VirtualComputeFlavour.flavourId:type_name -> Identifier
	9,  // 19: VirtualComputeFlavour.virtualMemory:type_name -> VirtualMemoryData
	10, // 20: VirtualComputeFlavour.virtualCpu:type_name -> VirtualCpuData
	12, // 21: VirtualComputeFlavour.storageAttributes:type_name -> VirtualStorageData
	11, // 22: VirtualComputeFlavour.virtualNetworkInterface:type_name -> VirtualNetworkInterfaceData
	27, // 23: VirtualComputeFlavour.metaData:type_name -> Metadata
	14, // 24: VirtualNetworkData.networkQoS:type_name -> NetworkQoS
	16, // 25: VirtualNetworkData.layer3Attributes:type_name -> NetworkSubnetData
	27, // 26: VirtualNetworkData.metaData:type_name -> Metadata
	24, // 27: NetworkSubnetData.networkId:type_name -> Identifier
	30, // 28: NetworkSubnetData.ipVersion:type_name -> IPVersion
	28, // 29: NetworkSubnetData.gatewayIp:type_name -> IPAddress
	31, // 30: NetworkSubnetData.cidr:type_name -> IPSubnetCIDR
	32, // 31: NetworkSubnetData.addressPool:type_name -> IPAddressPool
	27, // 32: NetworkSubnetData.metaData:type_name -> Metadata
	24, // 33: VirtualNetwork.networkResourceId:type_name -> Identifier
	24, // 34: VirtualNetwork.subnetId:type_name -> Identifier
	33, // 35: VirtualNetwork.operationalState:type_name -> OperationalState
	27, // 36: VirtualNetwork.metaData:type_name -> Metadata
	24, // 37: AffinityOrAntiAffinityConstraintForCompute.AffinityOrAntiAffinityResourceList.resourceId:type_name -> Identifier
	2,  // 38: VirtualCpuData.VirtualCpuPinningData.virtualCpuPinningPolicy:type_name -> VirtualCpuData.VirtualCpuPinningData.VirtualCpuPinningPolicy
	23, // 39: VirtualCpuData.VirtualCpuPinningData.virtualCpuPinningRules:type_name -> VirtualCpuData.VirtualCpuPinningData.VirtualCpuPinningRule
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareImageInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffinityOrAntiAffinityConstraintForCompute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffinityOrAntiAffinityConstraintForNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualInterfaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCompute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMemoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCpuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetworkInterfaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualStorageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualComputeFlavour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkQoS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetworkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSubnetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetworkPortData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualTrunkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetworkPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCpuData_VirtualCpuPinningData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualCpuData_VirtualCpuPinningData_VirtualCpuPinningRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceList_)(nil),
		(*AffinityOrAntiAffinityConstraintForCompute_AffinityOrAntiAffinityResourceGroupId)(nil),
	}
	file_types_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_types_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
