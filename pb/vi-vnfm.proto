syntax = "proto3";

package kubenvf.kubevim.api.pb;


import "common.proto";
import "types.proto";
import "google/protobuf/any.proto";

// For the grpc-gateway
import "google/api/annotations.proto";

option go_package = "github.com/kube-nfv/kube-vim-api/pb/nfv";

// Vi-Vnfm service definition.
service vi_vnfm {

    // Software Image Management Interface
    // Requirements: The Software Image Management interface produced by the VIM on the reference point Vi-Vnfm
    // shall support querying information of software image(s) from the VIM.

    // This operation allows querying the information of software images in the image repository managed by the VIM.
    // Result: As a result of this operation, the producer (VIM) shall indicate to the consumer (VNFM) whether or not it was possible to process the query
    rpc QueryImages(QueryImagesRequest) returns (QueryImagesResponse) {
        option(google.api.http) = {
            get: "/vivnfm/v5/images"
        };
    }
    // This operation allows querying the information about a specific software image in the image repository managed by the VIM.
    // Result: As a result of this operation, the producer (VIM) shall indicate to the consumer (VNFM) whether or not it was possible to process the query.
    rpc QueryImage(QueryImageRequest) returns (QueryImageResponse) {
        option(google.api.http) = {
            get: "/vivnfm/v5/images/{softwareImageId.value}"
        };
    }


    // Virtualised Compute Interfaces

    // Virtualised Compute Resources Management Interface
    // This interface allows an authorized consumer functional block to perform operations on virtualised compute resources available to the consumer
    // functional block. The interface includes operations for allocating, querying, updating and terminating virtualised compute resources as well as
    // operations for scaling, migrating and operating the administrative status of a virtualised compute resource
    // TODO: Add Requirements

    // This operation allows requesting the allocation of virtualised compute resources as indicated by the consumer functional block.
    // Result: After successful operation, the VIM has created the internal management objects for the virtualised compute resource and allocated this
    // resource according to the input requirements and constraints. In addition, the VIM shall return to the VNFM information on the newly instantiated
    // virtualised compute resource plus any additional information about the allocate request operation.
    // The VIM may also return intermediate status reports during the allocation process. If the operation was not successful,
    // the VIM shall return to the VNFM appropriate error information.
    rpc AllocateVirtualisedComputeResource(AllocateComputeRequest) returns (AllocateComputeResponse) {}


    // Virtualised Compute Flavour Management Interface
    // This interface allows an authorized consumer functional block to request operations related to flavours.
    // The interface includes operations for allocating, querying, updating and terminating flavours.

    // This operation allows requesting the creation of a flavour as indicated by the consumer functional block.
    // Result: After successful operation, the VIM has created the Compute Flavour.
    // In addition, the VIM shall return to the VNFM information on the newly created Compute Flavour.
    // If the operation was not successful, the VIM shall return to the VNFM appropriate error information.
    rpc CreateComputeFlavour(CreateComputeFlavourRequest) returns (CreateComputeFlavourResponse) {}
    // This operation allows querying information about created Compute Flavours.
    // Result: After successful operation, the VIM has queried the internal management objects for the Compute Flavours. The result of the query shall indicate with
    // a standard success/error result if the query has been processed correctly. For a particular query, information about the
    // Compute Flavours that the VNFM has access to and that are matching the filter shall be returned.
    rpc QueryComputeFlavour(QueryComputeFlavourRequest) returns (QueryComputeFlavourResponse) {}
    // This operation allows deleting a Compute Flavour.
    // Result: After successful operation, the VIM has deleted the Compute Flavour, so no new Virtualised Compute Resource can be allocated based on it.
    // The already allocated Virtualised Compute Resources are not affected. If the operation was not successful,
    // the VIM shall return to the VNFM appropriate error information.
    rpc DeleteComputeFlavour(DeleteComputeFlavourRequest) returns (DeleteComputeFlavourResponse) {}


    // Virtualised Network Interfaces

    // Virtualised Network Resources Management Interface
    // This interface allows an authorized consumer functional block to perform operations on virtualised network resources available to the consumer
    // functional block. The interface includes operations for allocating, querying, updating and terminating virtualised network resources.

    // This operation allows requesting the allocation of virtualised network resources as indicated by the consumer functional block.
    // Result: After successful operation, the VIM has created the internal management objects for the virtualised network resource and
    // allocated this resource. In addition, the VIM shall return to the VNFM information on the newly instantiated virtualised network resource
    // plus any additional information about the allocate request operation. The VIM may also return intermediate status reports during the allocation process.
    // If the operation was not successful, the VIM shall return to the VNFM appropriate error information.
    rpc AllocateVirtualisedNetworkResource(AllocateNetworkRequest) returns (AllocateNetworkResponse) {}
}

message QueryImagesRequest {
    Filter imageQueryFilter = 1;
}

message QueryImagesResponse {
    repeated SoftwareImageInformation softwareImagesInformation = 1;
}

message QueryImageRequest {
    Identifier softwareImageId = 1;
}

message QueryImageResponse {
    optional SoftwareImageInformation softwareImageInformation = 1;
}

message AllocateComputeRequest {
    // Name provided by the consumer for the virtualised compute resource to be allocated. It can be used for identifying resources from consumer side.
    optional string computeName = 1;
    // Identifier of the resource reservation applicable to this virtualised resource management operation.
    optional Identifier reservationId = 2;
    // List of elements with affinity or anti affinity (see clause 8.4.8.2) information of the virtualised compute resource to be allocated.
    // All the listed constraints shall be fulfilled for a successful operation.
    repeated AffinityOrAntiAffinityConstraintForCompute affinityOrAntiAffinityConstraints = 3;
    // Identifier of the Compute Flavour, that is providing information about the particular memory, CPU and disk resources for virtualised compute resource to
    // be allocated. The Compute Flavour is created with Create Compute Flavour operation (clause 7.3.4.2). For the content of Compute Flavour see clause 8.4.2.2.
    Identifier computeFlavourId = 4;
    // Identifier of the virtualisation container software image (e.g. a virtual machine image). Cardinality can be 0 if an "empty" virtualisation container is allocated.
    optional Identifier vcImageId = 5;
    // Data of network interfaces which are specific to a Virtual Compute Resource instance. See clause 8.4.3.7.
    repeated VirtualInterfaceData interfaceData = 6;
    // List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
    map<string, google.protobuf.Any> metaData = 7;
    // Unique identifier of the "infrastructure resource group", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.
    // Cardinality can be 0 if the consumer credentials are implicitly associated to a specific resource group.
    optional Identifier resourceGroupId = 8;

    // If present, it defines location constraints for the resource(s) is (are) requested to be allocated, e.g. in what particular resource zone
    // optional string locationConstraints = 9;

    // Contains user data to customize the virtualised compute resource at boot-time
    // The user data may consist of static data obtained from an attribute in the VNFD, data provided by the NFVO or the EM to the VNFM in the
    // operation that triggers the invocation of the Allocate Virtualised Compute Resource operation, e.g. the Instantiate VNF operation, and/or
    // one or multiple certificate data obtained from CMF when delegation-mode is used. The user data is transparent to the VIM.
    // It is passed to the allocated virtualised compute resource where it is up to the guest software to avail of
    // it in order to e.g. configure credentials, address information, install certificates, etc.
    optional UserData userData = 10;
}

message AllocateComputeResponse {
    VirtualCompute computeData = 1;
}

message CreateComputeFlavourRequest {
    // Provides information about the particular memory, CPU and disk resources for virtualised compute resource to be allocated.
    VirtualComputeFlavour flavour = 1;
}

message CreateComputeFlavourResponse {
    // Identifier of the created Compute Flavour.
    Identifier flavourId = 1;
}

message QueryComputeFlavourRequest {
    // Query filter based on e.g. name, identifier, meta-data information or status information, expressing the type of information to be retrieved.
    // It can also be used to specify one or more Compute Flavours to be queried by providing their identifiers.
    Filter queryComputeFlavourFilter = 1;
}

message QueryComputeFlavourResponse {
    // List of Compute Flavours matching the query.
    repeated VirtualComputeFlavour flavours = 1;
}

message DeleteComputeFlavourRequest {
    // Identifier of the Compute Flavour to be deleted.
    Identifier computeFlavourId = 1;
}

message DeleteComputeFlavourResponse {
    // No output parameters.
}

message AllocateNetworkRequest {
    // Name provided by the consumer for the virtualised network resource to be allocated. It can be used for identifying resources from consumer side.
    optional string networkResourceName = 1;
    // Identifier of the resource reservation applicable to this virtualised resource management operation.
    optional Identifier reservationId = 2;

    // Type of virtualised network resource.
    enum NetworkResourceType {
        NETWORK = 0;
        SUBNET  = 1;
        NETWORK_PORT = 2;
        TRUNK = 3;
    }
    optional NetworkResourceType networkResourceType = 3;
    // Provides information about the particular virtual network resource to be created. Cardinality can be "0" depending on the value of networkResourceType.
    optional VirtualNetworkData typeNetworkData = 4;
    // Provides information about the particular sub-network resource to be created. Cardinality can be "0" depending on the value of networkResourceType.
    optional NetworkSubnetData typeSubnetData = 5;
    // Provides information about the particular network port to be created. Cardinality can be "0" depending on the value of networkResourceType.
    optional VirtualNetworkPortData typeNetworkPortData = 6;
    // Provides information about the particular trunk to be created. Cardinality can be "0" depending on the value of networkResourceType.
    optional VirtualTrunkData typeTrunkData = 7;
    // List of elements with affinity or anti affinity (see clause 8.4.8.2) information of the virtualised network resource to be allocated.
    // All the listed constraints shall be fulfilled for a successful operation.
    repeated AffinityOrAntiAffinityConstraintForNetwork affinityOrAntiAffinityConstraints = 8;
    // If present, it defines location constraints for the resource(s) to be allocated, e.g. in what particular resource zone.
    optional string locationConstraintsForNetwork = 9;
    // List of metadata key-value pairs used by the consumer to associate meaningful metadata to the related virtualised resource.
    map<string, google.protobuf.Any> metaData = 10;
    // Unique identifier of the "infrastructure resource group", logical grouping of virtual resources assigned to a tenant within an Infrastructure Domain.
    // Cardinality can be 0 if the consumer credentials are implicitly associated to a specific resource group.
    optional Identifier resourceGroupId = 11;
}


message AllocateNetworkResponse {
    // If network types are created satisfactorily, it contains the data relative to the instantiated virtualised network resource.
    // Cardinality can be "0" if the request did not include creation of such type of resource.
    optional VirtualNetwork networkData = 1;
    // If subnet types are created satisfactorily, it contains the data relative to the allocated subnet.
    // Cardinality can be "0" if the request did not include creation of such type of resource.
    optional NetworkSubnet subnetData = 2;
    // If network port types are created satisfactorily, it contains the data relative to the allocated network port.
    // Cardinality can be "0" if the request did not include creation of such type of resource.
    optional VirtualNetworkPort networkPortData = 3;
    // If trunk types are created satisfactorily, it contains the data relative to the allocated trunk.
    // Cardinality can be "0" if the request did not include creation of such type of resource.
    optional VirtualTrunk trunkData = 4;
    // If routing resource types are created satisfactorily, it contains the data relative to the allocated routing resource.
    // Cardinality can be "0" if the request did not include creation of such type of resource.
    optional RoutingResource routingResourceData = 5;
}
